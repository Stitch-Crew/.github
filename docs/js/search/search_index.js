var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessTokenPayload.html",[0,0.89,1,2.585]],["body/interfaces/AccessTokenPayload.html",[0,1.462,1,4.244,2,2.045,3,0.283,4,0.283,5,0.224,6,4.239,7,2.395,8,3.78,9,1.586,10,4.239,11,2.282,12,3.164,13,0.442,14,1.462,15,5.288,16,1.234,17,0.442,18,0.018,19,5.288,20,2.057,21,1.776,22,5.234,23,0.283,24,0.015,25,0.015]],["title/interfaces/Account.html",[0,0.89,21,1.081]],["body/interfaces/Account.html",[0,1.389,2,1.883,3,0.261,4,0.261,5,0.207,9,1.461,11,2.102,12,2.915,13,0.407,14,1.389,16,1.371,17,0.57,18,0.019,21,1.856,23,0.261,24,0.014,25,0.014,26,3.905,27,3.273,28,1.258,29,2.932,30,3.468,31,3.723,32,5.135]],["title/controllers/AccountController.html",[33,2.061,34,2.585]],["body/controllers/AccountController.html",[3,0.102,4,0.102,5,0.081,7,2.379,10,3.661,11,0.823,13,0.159,16,0.941,17,0.451,18,0.019,20,1.586,21,1.927,23,0.102,24,0.007,25,0.007,27,1.707,28,1.021,29,1.614,30,1.426,33,0.989,34,2.027,35,0.927,36,1.529,37,1.363,38,0.848,39,2.992,40,2.828,41,3.69,42,2.91,43,3.078,44,4.036,45,3.789,46,3.17,47,1.78,48,2.61,49,0.877,50,1.78,51,1.369,52,1.304,53,1.78,54,1.304,55,2.428,56,2.91,57,1.78,58,1.363,59,1.78,60,2.969,61,1.529,62,2.91,63,3.264,64,3,65,1.78,66,1.78,67,4.636,68,1.78,69,2.969,70,1.529,71,1.865,72,3.707,73,3.661,74,1.78,75,1.78,76,1.78,77,2.732,78,1.78,79,1.78,80,0.769,81,2.499,82,0.872,83,1.363,84,0.368,85,2.05,86,1.529,87,2.969,88,2.499,89,1.363,90,0.7,91,2.195,92,1.78,93,1.363,94,1.059,95,1.78,96,2.969,97,1.141,98,1.529,99,1.78,100,1.78,101,0.091,102,0.872,103,1.529,104,0.778,105,0.872,106,4.262,107,2.91,108,1.78,109,1.78,110,3.867,111,3.17,112,3.17,113,3.661,114,1.529,115,2.191,116,1.616,117,2.701,118,1.78,119,1.78,120,2.91,121,3.166,122,1.78,123,1.614,124,2.91,125,1.616,126,2.195,127,2.499,128,1.78,129,1.78,130,2.027,131,1.78,132,1.141,133,0.927,134,0.7,135,1.78,136,1.78,137,1.529,138,1.141,139,1.78,140,1.529,141,1.529,142,1.78,143,1.78,144,1.78,145,2.91,146,1.78,147,1.78,148,1.78,149,1.529,150,1.24,151,1.24]],["title/modules/AccountModule.html",[152,1.135,153,2.208]],["body/modules/AccountModule.html",[3,0.182,4,0.182,5,0.144,9,1.019,17,0.284,18,0.019,21,1.322,23,0.182,24,0.011,25,0.011,28,0.689,34,3.689,35,2.363,38,0.924,49,0.592,51,0.924,52,1.259,54,0.881,80,0.896,84,0.656,85,3.928,86,2.724,101,0.163,116,2.52,152,1.871,153,4.245,154,1.314,155,2.098,156,2.724,157,2.724,158,2.724,159,2.724,160,4.078,161,3.928,162,2.52,163,1.762,164,1.762,165,3.172,166,3.897,167,4.537,168,2.699,169,2.699,170,2.908,171,3.172,172,4.537,173,5.781,174,3.172,175,4.537,176,2.429,177,4.537,178,3.172,179,2.429,180,3.172,181,3.172,182,3.172,183,3.475,184,3.172,185,2.209,186,1.762,187,2.209,188,3.172,189,2.724,190,2.724,191,1.555,192,3.172,193,3.172,194,4.549,195,4.549,196,5.297,197,3.172,198,3.172]],["title/injectables/AccountRepository.html",[161,2.061,199,0.806]],["body/injectables/AccountRepository.html",[3,0.165,4,0.165,5,0.131,13,0.257,16,1.241,17,0.526,18,0.019,20,1.862,21,1.852,23,0.165,24,0.01,25,0.01,27,2.842,28,1.277,29,1.846,30,2.453,38,1.23,39,1.495,40,3.034,43,3.465,49,1.097,51,1.713,52,1.632,54,1.532,55,2.85,80,0.85,84,0.593,101,0.147,102,1.407,105,2.068,115,1.958,117,2.688,133,1.495,134,1.659,161,2.344,186,1.594,191,1.407,199,0.917,200,1.128,201,2.466,202,2.939,203,3.625,204,3.625,205,3.232,206,2.871,207,4.226,208,2.871,209,4.22,210,4.22,211,2.871,212,3.625,213,2.871,214,3.625,215,2.871,216,4.22,217,2.871,218,2.466,219,2.466,220,2.466,221,2.199,222,2.199,223,2.466,224,2.199,225,3.232,226,2.871,227,2.939,228,2.871,229,2.871,230,4.22,231,2.466,232,2.871,233,2.871,234,2.871,235,4.22,236,2.871,237,2.871,238,2.466,239,2.871,240,2.871]],["title/classes/AccountResponseDto.html",[101,0.191,241,2.585]],["body/classes/AccountResponseDto.html",[3,0.26,4,0.26,5,0.206,13,0.406,14,1.385,16,1.249,17,0.517,18,0.019,21,1.32,23,0.26,24,0.014,25,0.014,27,2.94,28,1.255,29,2.78,49,1.078,61,2.393,80,0.773,90,1.78,101,0.233,126,3.436,191,2.83,241,4.022,242,1.981,243,4.869,244,3.155,245,5.775,246,4.96,247,4.423,248,4.53,249,5.775,250,4.53,251,3.116,252,4.53]],["title/injectables/AccountService.html",[85,2.061,199,0.806]],["body/injectables/AccountService.html",[3,0.162,4,0.162,5,0.129,11,1.31,13,0.254,14,1.002,16,1.237,17,0.548,18,0.019,20,1.85,21,2.085,23,0.162,24,0.01,25,0.01,27,1.31,28,1.27,29,1.239,30,2.433,38,1.218,39,2.586,40,3.026,43,3.672,49,1.141,51,1.704,52,1.623,54,1.522,55,2.84,77,3.514,80,0.782,82,2.433,84,0.585,85,2.321,88,2.433,93,2.169,101,0.145,102,2.433,105,2.048,114,2.433,115,1.945,117,2.171,133,1.475,134,1.113,161,3.397,199,0.908,200,1.113,203,3.589,204,3.589,212,3.589,214,3.589,223,2.433,224,2.169,238,3.589,253,2.433,254,4.965,255,4.965,256,2.433,257,4.178,258,2.832,259,2.832,260,2.832,261,2.832,262,2.832,263,2.832,264,2.169,265,2.433,266,2.169,267,2.832,268,2.832,269,4.178,270,2.832,271,2.832,272,2.832,273,2.433,274,2.832]],["title/interfaces/AccountToken.html",[0,0.89,275,2.585]],["body/interfaces/AccountToken.html",[0,1.267,2,1.637,3,0.227,4,0.227,5,0.18,7,2.777,9,1.27,11,1.828,12,2.534,13,0.354,14,1.267,16,1.335,17,0.647,18,0.019,21,1.539,23,0.227,24,0.013,25,0.013,27,2.443,28,1.148,30,2.589,31,2.934,82,2.589,104,2.602,116,2.934,121,2.351,134,2.076,150,4.424,151,4.424,275,3.679,276,3.394,277,3.027,278,3.027,279,1.828,280,3.143,281,4.537,282,5.283,283,4.046,284,5.283,285,4.537,286,5.283,287,5.283]],["title/classes/AccountTokenResponseDto.html",[101,0.191,288,2.585]],["body/classes/AccountTokenResponseDto.html",[3,0.224,4,0.224,5,0.178,7,2.77,13,0.349,14,1.257,16,1.266,17,0.621,18,0.019,23,0.224,24,0.013,25,0.013,28,1.139,49,1.179,61,2.618,80,0.701,90,1.534,101,0.2,104,2.291,126,3.76,132,3.359,138,3.359,149,4.5,150,4.119,151,4.119,191,2.568,222,2.99,242,1.707,243,5.049,244,2.719,246,5.428,251,3.231,275,4.119,288,3.649,289,5.239,290,3.903,291,5.239,292,3.903,293,5.239,294,3.903,295,3.903]],["title/classes/AuthenticationResponseDto.html",[87,2.585,101,0.191]],["body/classes/AuthenticationResponseDto.html",[3,0.266,4,0.266,5,0.211,7,1.819,13,0.414,14,1.405,17,0.524,18,0.019,21,2.029,23,0.266,24,0.015,25,0.015,49,1.093,61,2.426,80,0.859,87,4.078,90,1.819,101,0.238,121,3.821,241,4.473,242,2.024,244,3.224,251,3.411,288,4.473,296,5.516,297,4.629,298,4.629,299,5.855]],["title/classes/CreateAccountDto.html",[77,2.379,101,0.191]],["body/classes/CreateAccountDto.html",[3,0.162,4,0.162,5,0.128,9,1.591,13,0.252,14,0.999,16,1.021,17,0.373,18,0.019,21,1.214,23,0.162,24,0.01,25,0.01,27,2.921,30,3.388,31,3.038,32,4.189,46,4.697,49,0.777,61,1.725,77,2.67,80,0.663,90,1.108,101,0.214,115,2.453,116,3.038,125,3.741,126,3.254,242,1.233,247,2.16,251,2.427,300,3.793,301,2.16,302,3.19,303,1.725,304,4.165,305,2.82,306,3.809,307,2.82,308,2.82,309,2.82,310,3.577,311,3.19,312,3.577,313,3.19,314,2.82,315,2.82,316,2.82,317,2.82,318,2.82,319,3.793,320,2.82,321,2.901,322,3.577,323,2.422,324,3.175,325,2.82,326,2.82,327,4.952,328,1.566,329,1.469,330,1.964,331,2.16,332,2.422,333,2.16,334,2.422,335,2.16,336,3.577,337,3.19,338,4.697,339,2.422,340,4.253,341,2.16,342,3.19,343,2.422,344,2.16,345,1.964,346,2.16,347,3.19,348,2.422,349,2.16,350,2.422,351,3.19,352,2.422,353,2.16,354,2.422,355,2.422,356,2.422,357,2.82,358,2.82,359,2.422,360,2.82,361,2.82,362,2.82,363,2.82,364,2.82]],["title/classes/CreateDecryptionDto.html",[101,0.191,365,2.585]],["body/classes/CreateDecryptionDto.html",[3,0.267,4,0.267,5,0.212,13,0.417,14,1.411,16,1.263,17,0.527,18,0.019,23,0.267,24,0.015,25,0.015,49,1.098,61,2.437,80,0.787,90,1.833,101,0.302,123,2.818,242,2.039,251,3.158,321,4.488,324,4.131,328,2.59,365,4.097,366,4.935,367,4.005,368,4.488,369,4.663,370,4.663,371,4.005,372,4.663]],["title/classes/CreateEncryptionDto.html",[101,0.191,373,2.585]],["body/classes/CreateEncryptionDto.html",[3,0.267,4,0.267,5,0.211,13,0.416,14,1.408,16,1.095,17,0.525,18,0.019,23,0.267,24,0.015,25,0.015,49,1.095,61,2.431,80,0.785,90,1.826,101,0.301,123,2.813,242,2.032,251,3.153,303,2.431,321,4.088,324,4.124,328,2.58,366,4.927,368,4.48,371,3.991,373,4.088,374,3.559,375,4.646,376,4.646,377,4.646,378,5.869]],["title/modules/DatabaseModule.html",[152,1.135,379,2.379]],["body/modules/DatabaseModule.html",[3,0.29,4,0.29,5,0.23,18,0.019,23,0.29,24,0.015,25,0.015,80,0.932,84,1.044,101,0.26,152,1.892,154,2.093,168,3.006,169,3.006,170,3.239,185,3.52,186,2.806,329,2.632,379,3.964,380,5.053,381,5.117,382,5.053,383,4.34,384,5.053]],["title/interfaces/DecryptedResponse.html",[0,0.89,385,2.585]],["body/interfaces/DecryptedResponse.html",[0,1.021,2,1.763,3,0.244,4,0.244,5,0.194,9,1.368,13,0.381,14,1.331,16,1.266,17,0.497,18,0.019,23,0.244,24,0.014,25,0.014,71,3.557,123,3.097,132,3.557,279,1.968,303,2.81,385,3.864,386,3.656,387,2.965,388,3.26,389,3.26,390,4.257,391,5.009,392,4.249,393,4.249,394,4.249,395,5.548,396,5.548,397,4.299,398,5.548,399,5.548,400,5.548,401,6.54,402,5.548]],["title/interfaces/EncryptedResponse.html",[0,0.89,403,2.585]],["body/interfaces/EncryptedResponse.html",[0,1.193,2,2.061,3,0.285,4,0.285,5,0.226,9,1.598,13,0.445,14,1.469,16,1.327,17,0.445,18,0.018,23,0.285,24,0.015,25,0.015,123,2.175,279,2.3,387,3.464,388,3.81,389,3.81,392,4.69,394,4.69,403,4.265,404,4.272,405,4.974,406,5.108]],["title/controllers/EncryptionController.html",[33,2.061,407,2.585]],["body/controllers/EncryptionController.html",[3,0.162,4,0.162,5,0.129,13,0.254,17,0.374,18,0.019,20,1.411,23,0.162,24,0.01,25,0.01,28,0.908,33,1.573,35,1.475,37,2.169,38,1.218,40,2.675,49,0.78,51,1.218,52,1.16,54,1.16,55,2.397,61,1.731,63,3.2,67,3.803,70,3.589,71,3.514,72,4.26,73,4.708,80,0.847,81,2.433,82,2.433,84,0.585,89,2.169,90,1.113,94,1.685,96,3.458,97,1.816,98,2.433,101,0.145,102,1.388,110,3.818,111,3.589,112,3.589,115,1.945,117,1.827,123,2.171,134,2.154,137,3.589,365,3.818,368,1.973,373,3.818,391,2.169,406,1.973,407,2.91,408,2.433,409,4.477,410,4.071,411,2.832,412,6.117,413,5.481,414,3.818,415,2.832,416,2.832,417,4.198,418,2.832,419,2.832,420,2.832,421,2.832,422,2.832,423,3.458,424,2.169,425,2.832,426,2.954,427,2.433,428,2.832,429,2.832,430,2.169,431,4.178,432,4.178,433,4.178,434,2.832,435,4.178,436,4.178,437,4.178,438,2.832,439,4.178,440,4.178,441,2.832,442,2.832,443,2.832]],["title/modules/EncryptionModule.html",[152,1.135,444,2.379]],["body/modules/EncryptionModule.html",[3,0.253,4,0.253,5,0.2,18,0.019,23,0.253,24,0.014,25,0.014,35,2.954,80,0.917,84,0.91,101,0.226,152,1.735,154,1.825,155,2.623,162,3.15,163,2.446,164,2.446,168,3.374,169,3.374,407,4.37,426,4.175,427,3.783,444,4.637,445,3.783,446,3.783,447,3.783,448,4.175,449,4.404,450,4.404,451,5.672,452,3.374,453,4.404]],["title/injectables/EncryptionService.html",[199,0.806,426,2.208]],["body/injectables/EncryptionService.html",[3,0.113,4,0.113,5,0.089,7,2.533,13,0.176,16,1.247,17,0.516,18,0.019,20,1.331,23,0.113,24,0.008,25,0.008,28,1.074,38,0.917,39,2.886,40,2.775,43,1.022,49,0.922,51,1.44,52,1.371,54,1.253,55,2.306,64,3.138,71,2.018,80,0.742,84,0.405,101,0.101,102,1.543,105,0.961,115,2.451,117,2.819,123,2.667,130,2.192,133,2.573,134,1.237,199,0.684,200,0.771,218,1.685,279,1.456,280,2.345,303,1.633,329,1.022,330,1.366,368,2.192,385,1.366,391,3.784,393,3.456,394,3.02,403,2.746,406,2.192,409,3.02,410,2.746,426,1.873,430,1.502,452,1.502,454,1.685,455,3.148,456,3.148,457,1.961,458,5.274,459,3.942,460,2.684,461,1.961,462,1.961,463,1.961,464,1.961,465,1.961,466,3.148,467,1.961,468,3.148,469,1.961,470,1.961,471,1.961,472,1.961,473,1.961,474,1.502,475,2.746,476,1.961,477,1.961,478,2.703,479,2.411,480,1.961,481,3.942,482,3.148,483,3.386,484,3.148,485,5.274,486,5.274,487,3.148,488,4.512,489,3.148,490,3.148,491,3.942,492,1.961,493,3.942,494,3.942,495,3.148,496,2.703,497,3.148,498,3.148,499,1.961,500,3.148,501,3.148,502,3.148,503,3.02,504,1.961,505,1.961,506,1.961,507,1.961,508,1.685,509,1.961,510,1.961,511,3.148,512,1.257,513,1.685,514,1.961]],["title/interfaces/HandshakeResponse.html",[0,0.89,475,2.585]],["body/interfaces/HandshakeResponse.html",[0,1.166,2,2.013,3,0.279,4,0.279,5,0.221,9,1.562,13,0.435,14,1.448,16,1.225,17,0.435,18,0.018,23,0.279,24,0.015,25,0.015,43,3.144,279,2.247,387,3.385,388,3.722,389,3.722,392,4.623,475,4.204,479,5.26,508,5.639,512,3.87,515,4.174,516,4.86,517,4.86,518,6.036,519,5.184,520,5.184]],["title/modules/HeimdallModule.html",[152,1.135,448,2.208]],["body/modules/HeimdallModule.html",[3,0.272,4,0.272,5,0.216,18,0.019,23,0.272,24,0.015,25,0.015,80,0.796,84,0.982,101,0.244,152,1.821,154,1.968,155,2.752,162,3.305,163,2.638,164,2.638,168,3.54,170,3.815,448,4.32,460,4.485,521,4.08,522,4.08,523,4.08,524,4.751,525,4.751]],["title/injectables/HeimdallService.html",[199,0.806,460,2.208]],["body/injectables/HeimdallService.html",[3,0.151,4,0.151,5,0.119,13,0.235,16,1.342,17,0.473,18,0.019,20,1.603,23,0.151,24,0.01,25,0.01,27,1.215,28,0.859,38,1.151,40,2.841,43,3.384,49,0.886,51,1.151,52,1.466,54,1.318,58,3.637,80,0.529,84,0.543,101,0.135,115,2.254,116,1.459,117,2.841,123,2.31,125,3.145,199,0.859,200,1.032,280,1.563,303,2.346,393,3.026,406,3.679,409,3.026,410,2.752,460,2.35,478,5.11,479,4.557,496,3.393,512,2.533,526,2.256,527,5.282,528,3.951,529,6.351,530,6.351,531,2.627,532,3.951,533,2.627,534,2.627,535,3.393,536,2.627,537,2.627,538,4.748,539,4.748,540,3.951,541,3.951,542,2.627,543,2.012,544,2.627,545,2.627,546,2.627,547,2.627,548,3.951,549,4.748,550,2.627,551,2.012,552,2.627,553,3.951,554,5.282,555,3.951,556,2.627,557,2.627,558,2.627,559,2.256,560,2.627,561,2.627,562,2.627,563,2.627,564,2.627,565,2.627,566,2.627,567,2.627,568,2.627,569,2.627]],["title/classes/HttpExceptionFilter.html",[101,0.191,570,2.842]],["body/classes/HttpExceptionFilter.html",[3,0.199,4,0.199,5,0.158,13,0.311,16,0.649,17,0.311,18,0.019,23,0.199,24,0.012,25,0.012,28,0.755,38,1.41,49,0.649,51,1.013,52,0.965,54,0.965,64,2.068,80,0.745,82,2.372,84,0.718,94,3.312,101,0.179,110,4.193,115,2.136,125,3.092,191,2.372,242,1.52,279,2.238,503,4.611,520,2.985,559,2.985,570,3.707,571,4.157,572,2.985,573,5.568,574,4.84,575,5.568,576,6.02,577,3.476,578,4.84,579,4.84,580,3.476,581,2.421,582,3.476,583,3.476,584,3.476,585,3.476,586,2.985,587,3.476,588,3.476,589,5.568,590,5.568,591,3.476,592,4.84,593,4.782,594,3.476,595,3.476,596,4.782,597,3.476,598,3.476,599,3.476,600,3.476,601,2.985,602,3.476,603,3.476,604,3.476,605,3.476,606,3.476,607,3.476,608,3.476,609,2.662,610,3.476,611,2.985,612,3.476,613,3.476,614,2.985,615,3.476]],["title/interfaces/IRepository.html",[0,0.89,227,2.585]],["body/interfaces/IRepository.html",[0,1.148,2,1.983,3,0.275,4,0.275,5,0.218,13,0.428,16,1.217,17,0.535,18,0.018,23,0.275,24,0.015,25,0.015,28,1.299,29,2.093,38,1.742,49,1.116,51,1.742,52,1.66,54,1.66,55,2.987,202,4.165,205,4.58,227,4.165,609,3.666,616,4.111,617,5.979,618,5.601,619,4.786,620,5.135,621,4.786]],["title/interfaces/IService.html",[0,0.89,622,2.842]],["body/interfaces/IService.html",[0,1.071,2,1.85,3,0.256,4,0.256,5,0.203,13,0.4,16,1.178,17,0.565,18,0.018,23,0.256,24,0.014,25,0.014,28,1.372,29,1.953,38,1.668,49,1.178,51,1.84,52,1.753,54,1.753,55,3.081,202,3.986,205,4.384,609,3.421,618,5.424,620,4.915,622,4.384,623,3.836,624,5.723,625,5.723,626,6.66,627,4.466,628,4.466,629,5.723,630,4.466]],["title/injectables/JWTGuard.html",[199,0.806,631,2.842]],["body/injectables/JWTGuard.html",[3,0.367,4,0.168,5,0.133,7,2.707,9,1.377,13,0.262,17,0.262,18,0.019,20,0.989,21,0.854,23,0.168,24,0.011,25,0.011,28,0.637,31,3.094,38,1.249,49,0.547,51,0.854,52,0.813,54,1.189,64,3.804,80,0.573,82,3.213,83,3.281,84,0.606,101,0.22,113,3.68,116,3.94,125,2.813,127,2.517,130,3.88,133,1.526,134,1.152,195,2.517,199,0.931,200,1.152,303,2.565,519,3.68,631,3.879,632,2.517,633,5.571,634,4.284,635,4.658,636,4.284,637,4.284,638,4.284,639,4.284,640,5.064,641,4.284,642,5.318,643,5.091,644,2.93,645,4.284,646,4.284,647,4.284,648,5.571,649,4.284,650,5.571,651,4.284,652,4.284,653,4.284,654,4.284,655,2.93,656,2.244,657,3.68,658,4.284,659,4.785,660,2.93,661,2.93,662,2.93,663,2.93,664,2.93]],["title/injectables/JwtStrategy.html",[199,0.806,665,2.379]],["body/injectables/JwtStrategy.html",[1,4.228,3,0.203,4,0.203,5,0.161,13,0.317,14,1.177,15,2.714,17,0.504,18,0.019,20,1.656,21,2.038,23,0.203,24,0.012,25,0.012,28,1.066,29,1.55,38,1.429,39,2.93,40,2.46,43,2.555,49,1.05,51,1.429,52,1.362,54,0.984,55,2.145,80,0.905,84,0.732,85,3.662,101,0.182,105,1.737,115,1.741,117,1.55,121,2.918,132,2.272,199,1.066,200,1.393,222,2.714,256,4.213,266,2.714,273,3.044,329,1.846,330,2.468,635,2.468,656,2.714,657,3.044,665,3.144,666,3.044,667,4.213,668,4.905,669,4.905,670,3.544,671,3.544,672,3.544,673,3.544,674,3.044,675,3.544,676,3.044,677,3.544,678,3.544,679,3.544,680,3.544,681,3.544,682,3.544,683,3.044,684,2.468,685,2.714,686,3.044,687,3.544]],["title/injectables/LoggerMiddleware.html",[187,2.585,199,0.806]],["body/injectables/LoggerMiddleware.html",[3,0.232,4,0.232,5,0.184,11,2.484,13,0.363,17,0.363,18,0.019,23,0.232,24,0.013,25,0.013,28,0.881,38,1.566,49,1.002,51,1.181,52,1.125,54,1.125,80,0.893,82,3.144,84,0.838,101,0.208,105,2.953,176,3.104,187,3.742,191,1.986,199,1.167,200,1.593,279,2.967,329,2.111,383,3.481,417,3.104,581,2.823,601,3.481,688,3.481,689,4.053,690,4.614,691,5.175,692,4.914,693,5.511,694,4.053,695,4.614,696,4.053,697,4.053,698,4.614,699,3.481,700,4.053,701,4.053,702,4.053,703,4.053,704,4.053,705,4.053]],["title/classes/LoginDto.html",[60,2.585,101,0.191]],["body/classes/LoginDto.html",[3,0.215,4,0.215,5,0.17,9,1.86,13,0.335,14,1.221,16,1.159,17,0.456,18,0.019,23,0.215,24,0.013,25,0.013,27,3.172,30,3.361,31,3.45,32,4.758,44,4.373,49,0.95,60,3.547,61,2.109,80,0.681,90,1.471,101,0.261,116,3.45,126,3.696,242,1.637,247,3.9,251,2.836,278,3.9,302,3.9,303,2.109,306,4.327,310,4.373,311,3.9,312,4.373,313,3.9,321,3.547,322,4.373,323,3.214,324,3.71,328,2.078,359,4.373,706,3.214,707,3.742,708,6.212,709,3.742,710,3.742,711,3.742,712,5.092]],["title/interfaces/RefreshToken.html",[0,0.89,48,2.061]],["body/interfaces/RefreshToken.html",[0,1.281,2,1.663,3,0.23,4,0.23,5,0.183,7,2.689,9,1.29,11,1.856,12,2.574,13,0.359,14,1.281,16,1.277,17,0.572,18,0.019,21,2.067,23,0.23,24,0.013,25,0.013,28,1.16,29,2.992,31,2.965,48,3.331,277,3.075,397,4.177,414,4.635,713,3.075,714,5.876,715,5.49,716,5.338,717,5.338,718,6.392,719,5.338,720,5.338,721,4.585,722,5.338,723,5.338]],["title/classes/RefreshTokenDto.html",[69,2.585,101,0.191]],["body/classes/RefreshTokenDto.html",[3,0.226,4,0.226,5,0.179,7,2.775,9,1.694,11,2.438,13,0.353,14,1.265,16,0.984,17,0.353,18,0.019,23,0.226,24,0.013,25,0.013,30,2.584,31,2.928,45,4.067,49,0.735,61,1.632,69,3.672,80,0.705,82,2.584,90,1.548,101,0.271,102,2.912,125,2.188,126,3.136,130,3.672,134,2.493,138,3.379,150,4.138,242,1.723,251,2.584,280,3.136,281,4.528,285,4.528,302,4.038,303,2.184,324,3.379,328,2.188,724,4.528,725,3.384,726,3.94,727,4.528,728,5.272,729,5.272,730,5.272,731,5.272,732,3.94,733,3.94,734,5.272,735,3.94]],["title/interfaces/RefreshTokenPayload.html",[0,0.89,736,2.585]],["body/interfaces/RefreshTokenPayload.html",[0,1.401,2,1.911,3,0.265,4,0.265,5,0.21,7,2.649,8,3.533,9,1.482,11,2.133,12,2.957,13,0.413,14,1.401,15,5.162,17,0.523,18,0.019,19,5.162,20,1.972,21,1.702,22,5.017,23,0.265,24,0.014,25,0.014,29,2.555,45,2.957,104,3.106,713,3.533,736,4.069,737,6.74,738,5.842]],["title/injectables/RefreshTokensRepository.html",[199,0.806,739,2.208]],["body/injectables/RefreshTokensRepository.html",[3,0.196,4,0.196,5,0.155,7,1.877,13,0.305,16,1.028,17,0.493,18,0.019,20,1.612,21,0.994,23,0.196,24,0.012,25,0.012,28,1.198,29,2.611,38,1.392,39,1.776,40,2.849,48,1.894,49,1.028,51,1.606,52,1.53,54,1.326,55,2.611,80,0.799,84,0.705,101,0.175,102,1.671,103,4.102,104,2.849,105,2.341,115,1.695,117,2.088,132,2.186,133,2.487,134,2.347,151,4.159,186,1.894,199,1.038,200,1.34,207,4.573,219,2.929,220,2.929,221,2.612,231,2.929,264,2.612,414,2.375,676,2.929,739,2.841,740,5.128,741,2.929,742,5.511,743,4.776,744,3.411,745,3.411,746,4.776,747,3.411,748,3.411,749,5.511,750,4.776,751,3.411,752,3.411,753,4.776,754,3.411,755,3.411,756,3.411,757,3.411,758,2.929,759,3.411,760,3.411,761,3.411]],["title/classes/ResponseEncryptionDto.html",[101,0.191,423,2.585]],["body/classes/ResponseEncryptionDto.html",[3,0.295,4,0.295,5,0.234,13,0.46,14,1.498,17,0.46,18,0.018,23,0.295,24,0.015,25,0.015,49,0.958,61,2.127,80,0.687,90,2.018,101,0.264,123,2.942,242,2.246,251,3.297,303,2.587,374,3.933,423,4.349,424,4.782,762,5.135]],["title/interfaces/ResponseInterface.html",[0,0.89,94,2.208]],["body/interfaces/ResponseInterface.html",[0,1.289,2,1.679,3,0.232,4,0.232,5,0.184,9,1.302,13,0.363,14,1.289,16,1.28,17,0.614,18,0.019,23,0.308,24,0.013,25,0.013,28,1.544,64,2.411,72,2.823,94,3.196,104,2.635,110,4.778,121,3.196,123,3,125,3.81,279,2.786,306,2.823,593,5.511,596,5.511,614,3.481,763,3.104,764,4.053,765,6.026,766,5.511,767,5.372,768,5.372]],["title/injectables/SecurityMiddleware.html",[199,0.806,769,2.842]],["body/injectables/SecurityMiddleware.html",[3,0.185,4,0.185,5,0.146,9,1.035,11,2.121,13,0.288,17,0.288,18,0.019,23,0.185,24,0.011,25,0.011,28,0.7,38,1.336,49,0.601,51,0.938,52,0.894,54,0.894,67,4.712,80,0.715,82,3.402,84,0.666,101,0.165,115,2.065,123,2.545,176,2.466,191,1.578,199,0.997,200,1.266,279,3.248,303,2.411,410,3.194,417,3.513,512,2.064,581,2.243,659,4.587,690,3.939,691,4.999,692,5.242,693,4.999,695,3.939,769,3.513,770,2.766,771,3.22,772,4.586,773,4.586,774,4.586,775,6.151,776,3.939,777,3.939,778,2.766,779,3.22,780,4.586,781,3.22,782,3.22,783,3.939,784,3.22,785,3.22,786,3.22,787,3.22,788,4.586,789,3.22,790,3.22,791,5.341,792,4.586,793,3.22,794,4.586,795,3.22,796,3.22,797,3.22]],["title/modules/StitchModule.html",[152,1.135,798,2.585]],["body/modules/StitchModule.html",[3,0.218,4,0.218,5,0.173,18,0.019,23,0.218,24,0.013,25,0.013,35,1.978,80,0.95,84,0.785,101,0.195,152,1.574,153,4.006,154,1.574,155,2.379,162,2.857,163,2.11,164,2.11,169,3.06,194,3.262,379,4.316,444,4.316,448,4.006,798,5.144,799,3.262,800,3.262,801,4.316,802,3.798,803,3.798,804,3.798,805,3.798,806,3.798,807,3.262,808,3.262,809,3.798,810,3.798,811,3.262,812,3.798,813,3.798,814,3.798,815,3.798,816,3.798,817,3.798,818,3.262]],["title/modules/TestModule.html",[152,1.135,819,2.842]],["body/modules/TestModule.html",[3,0.307,4,0.307,5,0.243,18,0.019,23,0.307,24,0.016,25,0.016,80,0.857,84,1.106,101,0.275,152,1.959,154,2.217,169,3.184,185,3.727,186,2.972,819,4.903,820,5.351,821,5.351]],["title/injectables/TimeoutInterceptor.html",[199,0.806,822,2.842]],["body/injectables/TimeoutInterceptor.html",[3,0.235,4,0.235,5,0.186,13,0.366,17,0.484,18,0.019,20,1.381,23,0.235,24,0.013,25,0.013,28,1.175,38,1.576,49,1.009,51,1.576,52,1.501,54,1.136,80,0.81,84,0.846,101,0.21,102,2.005,105,2.005,115,1.918,191,2.005,199,1.175,200,1.608,279,1.892,430,3.134,474,3.134,642,3.515,643,5.532,692,4.637,822,4.141,823,5.2,824,3.515,825,5.406,826,4.092,827,6.879,828,4.092,829,5.406,830,6.44,831,4.092,832,6.054,833,5.406,834,3.515,835,4.092,836,4.141,837,4.092,838,4.092,839,4.092,840,4.092,841,4.092]],["title/modules/TokenModule.html",[152,1.135,160,2.379]],["body/modules/TokenModule.html",[3,0.202,4,0.202,5,0.16,9,1.129,18,0.019,23,0.202,24,0.012,25,0.012,45,3.126,48,1.952,52,0.976,80,0.934,84,0.726,91,4.286,101,0.18,152,1.944,153,2.901,154,1.456,155,2.255,160,4.618,162,2.708,163,1.952,164,1.952,166,4.189,168,2.901,169,2.091,170,3.126,179,3.735,185,2.448,186,1.952,189,3.018,190,3.018,278,3.735,283,4.633,329,1.83,330,2.448,665,4.216,683,3.018,684,2.448,685,2.692,686,3.018,739,3.912,783,3.018,842,3.018,843,3.018,844,3.018,845,3.514,846,3.514,847,2.692,848,3.735,849,3.514,850,3.018,851,3.514,852,3.514,853,3.514,854,3.514]],["title/injectables/TokensService.html",[91,2.208,199,0.806]],["body/injectables/TokensService.html",[3,0.103,4,0.103,5,0.082,7,2.546,13,0.16,14,0.702,16,1.075,17,0.53,18,0.019,19,2.241,20,1.802,21,1.965,23,0.103,24,0.007,25,0.007,28,1.21,38,0.853,39,3.413,40,2.992,43,2.9,45,1.876,48,0.996,49,1.105,51,1.623,52,1.546,54,1.482,55,2.795,80,0.745,83,1.373,84,0.371,91,1.741,93,1.373,101,0.092,102,2.48,104,1.622,105,1.434,115,2.152,117,2.213,121,2.806,133,2.78,134,2.098,140,1.54,141,3.676,161,2.619,179,1.373,199,0.636,200,0.704,265,1.54,266,1.373,283,3.876,483,1.54,503,1.373,586,1.54,635,3.718,684,2.981,685,3.612,721,1.54,736,3.718,739,3.01,758,1.54,847,1.373,850,1.54,855,1.373,856,3.708,857,3.708,858,2.926,859,3.708,860,3.708,861,3.708,862,3.708,863,1.793,864,5.06,865,2.926,866,1.793,867,1.793,868,1.793,869,1.793,870,2.926,871,1.793,872,1.793,873,1.793,874,1.793,875,1.793,876,1.793,877,1.793,878,1.793,879,1.793,880,2.926,881,1.793,882,1.793,883,2.926,884,1.54,885,2.926,886,2.84,887,1.54,888,2.513,889,1.54,890,1.793,891,1.793,892,1.793,893,4.28,894,2.926,895,2.926,896,1.793,897,1.793,898,1.793,899,1.793,900,1.793,901,5.338,902,1.793,903,1.793,904,1.793,905,1.793,906,1.793,907,2.926,908,2.926,909,1.793,910,1.793,911,2.926,912,1.793,913,1.793]],["title/controllers/UptimeController.html",[33,2.061,914,2.585]],["body/controllers/UptimeController.html",[3,0.274,4,0.274,5,0.217,13,0.427,18,0.019,20,1.61,23,0.274,24,0.015,25,0.015,33,3.313,35,2.483,37,3.652,38,1.738,49,0.89,54,1.324,61,1.975,80,0.798,84,0.986,89,3.652,90,1.874,101,0.245,104,2.085,914,4.155,915,4.096,916,5.858,917,4.768,918,5.965,919,4.768,920,4.768,921,4.768,922,4.768,923,4.768]],["title/modules/UptimeModule.html",[152,1.135,801,2.379]],["body/modules/UptimeModule.html",[3,0.304,4,0.304,5,0.241,18,0.019,23,0.304,24,0.016,25,0.016,35,3.317,80,0.852,84,1.097,101,0.273,152,1.949,154,2.198,801,4.083,914,4.753,924,5.307,925,5.307]],["title/modules/ValidationModule.html",[152,1.135,926,2.585]],["body/modules/ValidationModule.html",[3,0.283,4,0.283,5,0.224,18,0.018,23,0.283,24,0.015,25,0.015,80,0.815,84,1.02,101,0.253,152,1.865,154,2.045,155,2.818,162,3.385,163,2.741,164,2.741,168,3.625,170,3.164,926,5.032,927,4.239,928,4.239,929,4.694,930,4.935,931,4.935]],["title/injectables/ValidationPipe.html",[199,0.806,929,2.379]],["body/injectables/ValidationPipe.html",[3,0.214,4,0.214,5,0.17,13,0.334,16,0.696,17,0.517,18,0.019,20,1.951,23,0.214,24,0.013,25,0.013,28,1.104,38,1.481,39,3.01,40,2.527,49,0.948,51,1.481,52,1.411,54,1.411,58,2.858,63,2.858,80,0.773,84,0.771,101,0.297,104,1.632,115,2.051,117,1.632,133,1.943,134,1.466,191,1.829,199,1.104,200,1.466,264,2.858,303,2.105,328,2.072,345,2.599,397,4.025,667,3.205,929,3.258,932,3.205,933,5.082,934,5.082,935,5.082,936,3.731,937,6.204,938,5.082,939,6.204,940,3.731,941,4.752,942,5.082,943,3.731,944,3.205,945,3.731,946,3.731,947,3.731,948,3.731,949,3.731,950,3.731,951,3.731,952,3.731,953,3.731,954,3.731]],["title/changelog.html",[955,2.662,956,2.662,957,2.662]],["body/changelog.html",[5,0.235,18,0.016,24,0.016,25,0.016,727,4.446,957,4.446,958,5.177,959,5.177,960,4.446,961,5.177,962,5.177,963,5.177,964,4.446,965,5.177,966,5.177,967,4.446,968,5.177,969,4.446,970,5.177,971,5.177,972,5.177,973,6.275,974,5.177,975,5.177,976,3.965,977,5.177,978,5.177,979,5.177,980,4.446,981,5.177,982,5.177,983,5.177,984,4.446,985,5.177]],["title/coverage.html",[986,3.878]],["body/coverage.html",[0,1.462,1,1.268,5,0.083,6,1.564,7,1.473,8,2.27,17,0.163,18,0.019,21,0.531,24,0.007,25,0.007,26,1.564,33,2.082,34,1.268,36,1.564,48,1.011,60,1.268,69,1.268,77,1.167,85,1.011,87,1.268,91,1.083,94,1.083,96,1.268,97,1.167,101,0.306,134,0.716,161,1.011,183,1.395,187,1.268,199,1.351,201,1.564,225,1.395,227,1.268,241,1.268,243,2.27,244,2.611,253,1.564,275,1.268,276,1.564,277,2.27,288,1.268,296,1.564,300,4.843,301,4.843,319,1.395,329,0.948,331,1.395,333,1.395,335,1.395,337,1.395,341,1.395,342,1.395,344,1.395,345,5.247,347,1.395,349,1.395,351,1.395,353,1.395,365,1.268,366,2.27,367,1.564,373,1.268,374,2.27,381,1.395,385,1.268,386,1.564,387,2.611,403,1.268,404,1.564,407,1.268,408,1.564,423,1.268,424,1.395,426,1.083,454,1.564,460,1.083,475,1.268,515,1.564,526,1.564,570,1.395,571,1.564,572,1.564,616,1.564,622,1.395,623,1.564,631,1.395,632,1.564,665,1.167,666,1.564,688,1.564,706,1.564,713,2.27,724,1.564,725,1.564,736,1.268,739,1.083,740,1.564,741,1.564,763,1.395,769,1.395,770,1.564,776,5.114,818,1.564,822,1.395,823,1.564,824,1.564,848,1.395,855,2.27,886,1.395,914,1.268,915,1.564,929,1.167,932,1.564,986,1.395,987,1.821,988,1.821,989,1.564,990,7.079,991,7.298,992,1.395,993,2.27,994,2.27,995,1.564,996,1.564,997,3.748,998,4.32,999,5.792,1000,2.964,1001,1.821,1002,3.219,1003,1.564,1004,1.564,1005,1.564,1006,3.642,1007,1.564,1008,1.564,1009,1.564,1010,1.564,1011,1.564,1012,3.219,1013,1.564,1014,1.564,1015,1.564,1016,1.564,1017,3.748,1018,1.821,1019,1.821,1020,2.546,1021,1.564,1022,1.564,1023,2.546,1024,1.564,1025,1.564,1026,1.821,1027,5.955,1028,4.32,1029,4.755,1030,1.821,1031,1.821,1032,1.821,1033,1.821,1034,1.821,1035,1.821,1036,1.564,1037,1.395,1038,1.395,1039,1.564,1040,1.564,1041,1.564,1042,1.821,1043,1.821]],["title/dependencies.html",[155,2.064,976,2.374]],["body/dependencies.html",[18,0.019,24,0.013,25,0.013,84,0.79,90,1.502,101,0.265,155,1.767,186,2.122,221,2.927,224,2.927,328,2.122,452,2.927,474,2.927,535,3.282,581,2.661,611,3.282,635,2.661,656,2.927,674,5.024,698,3.282,699,3.282,777,3.282,778,3.282,807,3.282,808,3.282,811,3.282,834,3.282,847,2.927,884,3.282,944,3.282,1044,3.821,1045,5.85,1046,3.821,1047,5.85,1048,3.821,1049,3.821,1050,3.821,1051,3.821,1052,3.821,1053,3.821,1054,3.821,1055,3.821,1056,3.821,1057,3.821,1058,3.821,1059,3.821,1060,3.821,1061,3.821,1062,3.821,1063,3.821,1064,3.821,1065,3.821,1066,3.821,1067,3.821,1068,3.821,1069,3.821,1070,3.821,1071,3.821,1072,3.821,1073,3.821,1074,3.821,1075,3.821,1076,3.821,1077,3.821,1078,3.821,1079,3.821,1080,3.821,1081,3.821,1082,3.821,1083,3.821,1084,3.821,1085,3.821,1086,3.821,1087,3.821,1088,3.821,1089,3.821,1090,3.821,1091,3.821,1092,3.821,1093,3.821]],["title/miscellaneous/functions.html",[1094,1.844,1095,3.833]],["body/miscellaneous/functions.html",[13,0.308,16,1.176,17,0.622,18,0.018,24,0.012,25,0.012,28,1.51,51,2.025,52,1.929,54,1.861,96,3.345,97,2.204,104,3.218,551,2.633,836,2.633,941,3.679,992,3.679,993,2.633,994,3.679,995,4.125,1006,2.633,1007,4.125,1008,4.125,1009,4.125,1020,2.953,1021,4.125,1022,4.125,1023,2.953,1024,4.125,1025,4.125,1040,2.953,1041,4.754,1094,2.045,1095,2.953,1096,2.953,1097,3.438,1098,4.803,1099,4.803,1100,4.754,1101,2.953,1102,3.438,1103,4.125,1104,4.125,1105,3.438,1106,3.438,1107,5.992,1108,3.438,1109,3.438,1110,3.438,1111,3.438,1112,3.438,1113,3.438,1114,3.438,1115,4.803,1116,5.535,1117,3.438,1118,3.438,1119,3.438,1120,3.438]],["title/index.html",[13,0.277,955,2.662,956,2.662]],["body/index.html",[18,0.019,24,0.014,25,0.014,138,2.863,155,2.065,280,3.405,306,3.111,543,4.384,916,3.836,980,3.836,984,3.836,986,3.421,1121,4.466,1122,4.466,1123,4.466,1124,4.466,1125,4.466,1126,4.466,1127,4.466,1128,5.723,1129,4.466,1130,4.466,1131,4.466,1132,4.466,1133,7.163,1134,4.466,1135,4.466,1136,7.163,1137,4.466,1138,4.466,1139,4.466,1140,4.466,1141,4.466,1142,5.723,1143,4.466,1144,4.466,1145,4.466,1146,4.466,1147,5.723,1148,5.723,1149,4.466,1150,4.466,1151,4.466]],["title/modules.html",[154,2.097]],["body/modules.html",[18,0.015,24,0.015,25,0.015,153,2.948,154,2.053,160,3.176,379,3.176,444,3.176,448,2.948,798,3.451,801,3.176,819,3.795,926,3.451,1152,7.232,1153,7.232,1154,7.232,1155,7.46,1156,6.623,1157,6.623]],["title/overview.html",[1158,4.348]],["body/overview.html",[2,1.448,18,0.019,24,0.012,25,0.012,35,1.82,85,3.74,91,4.006,153,4.244,154,1.448,155,2.247,156,3.002,157,3.002,158,3.002,159,3.002,160,4.527,161,3.74,162,2.698,163,1.941,164,1.941,200,1.374,242,1.528,346,2.677,379,3.58,426,3.322,444,4.317,445,3.002,446,3.002,447,3.002,448,4.006,460,4.006,521,3.002,522,3.002,523,3.002,665,3.58,739,3.322,798,5.013,799,3.002,800,3.002,801,3.58,842,3.002,843,3.002,844,3.002,926,4.203,927,3.002,928,3.002,929,3.58,969,3.002,1158,3.002,1159,3.495,1160,3.495,1161,3.495]],["title/properties.html",[14,1.07,976,2.374]],["body/properties.html",[9,1.764,14,1.317,18,0.018,24,0.016,25,0.016,202,3.824,280,3.266,543,4.205,960,4.715,964,4.715,967,4.715,1162,5.49,1163,5.49,1164,5.49,1165,5.49,1166,5.49,1167,5.49]],["title/miscellaneous/typealiases.html",[1094,1.844,1168,4.462]],["body/miscellaneous/typealiases.html",[13,0.473,17,0.61,18,0.017,24,0.016,25,0.016,64,3.144,72,3.681,97,3.388,763,4.048,766,5.457,992,4.866,1037,4.048,1038,4.866,1094,3.144,1096,4.539,1103,5.457,1169,5.284,1170,5.457,1171,4.539,1172,5.284,1173,6.353]],["title/miscellaneous/variables.html",[1094,1.844,1174,3.833]],["body/miscellaneous/variables.html",[13,0.393,16,1.146,17,0.586,18,0.019,20,1.288,21,0.882,24,0.008,25,0.008,27,0.864,30,2.529,40,0.817,55,0.817,71,3.627,104,1.324,115,1.928,117,0.817,134,1.5,138,3.09,183,2.319,207,3.36,225,2.319,300,1.432,301,4.877,303,0.774,311,1.432,313,1.432,319,2.319,329,1.577,331,2.319,332,1.605,333,2.319,334,1.605,335,2.319,336,2.6,337,2.319,338,3.768,339,1.605,340,3.277,341,2.319,342,2.319,343,1.605,344,2.319,345,1.302,346,1.432,347,2.319,348,1.605,349,2.319,350,1.605,351,2.319,352,1.605,353,2.319,354,1.605,355,1.605,356,1.605,381,2.319,397,1.302,414,1.302,512,2.813,513,1.605,551,1.432,684,1.302,714,1.605,715,1.605,836,2.923,848,2.319,855,1.432,886,2.319,887,1.605,888,2.6,889,1.605,941,5.551,989,1.605,993,1.432,994,2.319,996,2.6,1002,1.605,1003,2.6,1004,2.6,1005,2.6,1006,1.432,1010,2.6,1011,2.6,1012,1.605,1013,2.6,1014,2.6,1015,1.605,1016,2.6,1036,1.605,1037,1.432,1038,2.319,1039,1.605,1094,1.112,1100,2.6,1101,1.605,1104,6.103,1170,1.605,1171,1.605,1174,1.605,1175,1.869,1176,1.869,1177,6.262,1178,1.869,1179,1.869,1180,3.816,1181,3.816,1182,1.869,1183,3.028,1184,1.869,1185,1.869,1186,1.869,1187,1.869,1188,1.869,1189,1.869,1190,1.869,1191,1.869,1192,1.869,1193,1.869,1194,1.869,1195,1.869,1196,1.869,1197,1.869,1198,1.869,1199,1.869,1200,3.028,1201,3.028,1202,1.869,1203,3.816,1204,3.028,1205,3.028,1206,1.869,1207,1.869,1208,4.387,1209,4.387,1210,1.869,1211,1.869,1212,1.869,1213,1.869,1214,1.869,1215,1.869,1216,3.028,1217,1.869,1218,1.869,1219,1.869,1220,1.869,1221,1.869,1222,3.028,1223,1.869,1224,1.869,1225,1.869,1226,1.869,1227,1.869,1228,1.869,1229,1.869,1230,1.869,1231,1.869]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"modules/DatabaseModule.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"controllers/EncryptionController.html":{},"modules/EncryptionModule.html":{},"injectables/EncryptionService.html":{},"interfaces/HandshakeResponse.html":{},"modules/HeimdallModule.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"interfaces/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/RefreshTokensRepository.html":{},"classes/ResponseEncryptionDto.html":{},"interfaces/ResponseInterface.html":{},"injectables/SecurityMiddleware.html":{},"modules/StitchModule.html":{},"modules/TestModule.html":{},"injectables/TimeoutInterceptor.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{},"controllers/UptimeController.html":{},"modules/UptimeModule.html":{},"modules/ValidationModule.html":{},"injectables/ValidationPipe.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":345,"title":{},"body":{"classes/CreateAccountDto.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":1088,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1061,"title":{},"body":{"dependencies.html":{}}}],["0.3.11",{"_index":1093,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1060,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1082,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":991,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1019,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":997,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":999,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":998,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1026,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1017,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1018,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":970,"title":{},"body":{"changelog.html":{}}}],["1.0.0",{"_index":1085,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":1044,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":967,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["1.2.28",{"_index":1091,"title":{},"body":{"dependencies.html":{}}}],["1.4.7",{"_index":1057,"title":{},"body":{"dependencies.html":{}}}],["1/2",{"_index":1035,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":969,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["10.0.1",{"_index":1046,"title":{},"body":{"dependencies.html":{}}}],["10.4.3",{"_index":1064,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1027,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":923,"title":{},"body":{"controllers/UptimeController.html":{}}}],["11",{"_index":1161,"title":{},"body":{"overview.html":{}}}],["11.5.0",{"_index":1069,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":1160,"title":{},"body":{"overview.html":{}}}],["123456789",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["123mudar",{"_index":359,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{}}}],["123mudar!'})@isdefined()@matches(checkuppercasestring",{"_index":314,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["128",{"_index":313,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{},"miscellaneous/variables.html":{}}}],["16",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16.0.3",{"_index":1066,"title":{},"body":{"dependencies.html":{}}}],["2.0.4",{"_index":1078,"title":{},"body":{"dependencies.html":{}}}],["2.1302.0",{"_index":1058,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":1073,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1059,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1029,"title":{},"body":{"coverage.html":{}}}],["201",{"_index":111,"title":{},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{}}}],["2023",{"_index":968,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":108,"title":{},"body":{"controllers/AccountController.html":{}}}],["2592000",{"_index":293,"title":{},"body":{"classes/AccountTokenResponseDto.html":{}}}],["3",{"_index":1159,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":1050,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":1049,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1028,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":1032,"title":{},"body":{"coverage.html":{}}}],["3/6",{"_index":1001,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":109,"title":{},"body":{"controllers/AccountController.html":{}}}],["4.0.1",{"_index":1083,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":1062,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":1071,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":1034,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":601,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{}}}],["401",{"_index":124,"title":{},"body":{"controllers/AccountController.html":{}}}],["422",{"_index":607,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["5.10.2",{"_index":1081,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1030,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1000,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":604,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["6.1.4",{"_index":1051,"title":{},"body":{"dependencies.html":{}}}],["6.8.3",{"_index":1074,"title":{},"body":{"dependencies.html":{}}}],["6.9.1",{"_index":1080,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":107,"title":{},"body":{"controllers/AccountController.html":{}}}],["60000",{"_index":839,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["600000",{"_index":1120,"title":{},"body":{"miscellaneous/functions.html":{}}}],["6c6642f",{"_index":977,"title":{},"body":{"changelog.html":{}}}],["7.2.0",{"_index":1089,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":1031,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":311,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{},"miscellaneous/variables.html":{}}}],["80",{"_index":1033,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":346,"title":{},"body":{"classes/CreateAccountDto.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["9.0.0",{"_index":1047,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":1055,"title":{},"body":{"dependencies.html":{}}}],["9.1.4",{"_index":1053,"title":{},"body":{"dependencies.html":{}}}],["9.2.1",{"_index":1045,"title":{},"body":{"dependencies.html":{}}}],["9b2c4f5",{"_index":982,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":350,"title":{},"body":{"classes/CreateAccountDto.html":{},"miscellaneous/variables.html":{}}}],["abc123",{"_index":249,"title":{},"body":{"classes/AccountResponseDto.html":{}}}],["abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accept",{"_index":722,"title":{},"body":{"interfaces/RefreshToken.html":{}}}],["access",{"_index":31,"title":{},"body":{"interfaces/Account.html":{},"interfaces/AccountToken.html":{},"classes/CreateAccountDto.html":{},"injectables/JWTGuard.html":{},"classes/LoginDto.html":{},"interfaces/RefreshToken.html":{},"classes/RefreshTokenDto.html":{}}}],["accesstoken",{"_index":10,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"controllers/AccountController.html":{}}}],["accesstokenpayload",{"_index":1,"title":{"interfaces/AccessTokenPayload.html":{}},"body":{"interfaces/AccessTokenPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["account",{"_index":21,"title":{"interfaces/Account.html":{}},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/RefreshToken.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/TokensService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["account.controller",{"_index":180,"title":{},"body":{"modules/AccountModule.html":{}}}],["account.dto.ts",{"_index":301,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["account.dto.ts:47",{"_index":308,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:68",{"_index":320,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.email",{"_index":148,"title":{},"body":{"controllers/AccountController.html":{}}}],["account.id",{"_index":147,"title":{},"body":{"controllers/AccountController.html":{}}}],["account.password",{"_index":268,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.service",{"_index":86,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{}}}],["account/account.module",{"_index":852,"title":{},"body":{"modules/TokenModule.html":{}}}],["account/login",{"_index":197,"title":{},"body":{"modules/AccountModule.html":{}}}],["account/refresh",{"_index":198,"title":{},"body":{"modules/AccountModule.html":{}}}],["accountcontroller",{"_index":34,"title":{"controllers/AccountController.html":{}},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"coverage.html":{}}}],["accountid",{"_index":749,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["accountmodel",{"_index":209,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["accountmodule",{"_index":153,"title":{"modules/AccountModule.html":{}},"body":{"modules/AccountModule.html":{},"modules/StitchModule.html":{},"modules/TokenModule.html":{},"modules.html":{},"overview.html":{}}}],["accountrepository",{"_index":161,"title":{"injectables/AccountRepository.html":{}},"body":{"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/TokensService.html":{},"coverage.html":{},"overview.html":{}}}],["accountresponsedto",{"_index":241,"title":{"classes/AccountResponseDto.html":{}},"body":{"classes/AccountResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"coverage.html":{}}}],["accounts",{"_index":167,"title":{},"body":{"modules/AccountModule.html":{}}}],["accountschema",{"_index":183,"title":{},"body":{"modules/AccountModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["accountservice",{"_index":85,"title":{"injectables/AccountService.html":{}},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["accounttoken",{"_index":275,"title":{"interfaces/AccountToken.html":{}},"body":{"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"coverage.html":{}}}],["accounttokenresponsedto",{"_index":288,"title":{"classes/AccountTokenResponseDto.html":{}},"body":{"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"coverage.html":{}}}],["add",{"_index":785,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["admin",{"_index":1068,"title":{},"body":{"dependencies.html":{}}}],["aliases",{"_index":1169,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":114,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["api",{"_index":280,"title":{},"body":{"interfaces/AccountToken.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"classes/RefreshTokenDto.html":{},"index.html":{},"properties.html":{}}}],["api@stitch.com",{"_index":544,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["apiendpoint",{"_index":96,"title":{},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["apiendpoint(options",{"_index":1102,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apiendpoint({auth",{"_index":70,"title":{},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{}}}],["apiendpoint({success",{"_index":62,"title":{},"body":{"controllers/AccountController.html":{}}}],["apiendpointoptions",{"_index":1103,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["apiexcludecontroller",{"_index":919,"title":{},"body":{"controllers/UptimeController.html":{}}}],["apiexcludecontroller(true",{"_index":921,"title":{},"body":{"controllers/UptimeController.html":{}}}],["apiproperty",{"_index":251,"title":{},"body":{"classes/AccountResponseDto.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResponseEncryptionDto.html":{}}}],["apiproperty({description",{"_index":726,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["apiproperty({example",{"_index":246,"title":{},"body":{"classes/AccountResponseDto.html":{},"classes/AccountTokenResponseDto.html":{}}}],["apipublickey",{"_index":510,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["apitags",{"_index":89,"title":{},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{},"controllers/UptimeController.html":{}}}],["apitags('account",{"_index":99,"title":{},"body":{"controllers/AccountController.html":{}}}],["apitags('encryption",{"_index":428,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["apitags('uplink",{"_index":920,"title":{},"body":{"controllers/UptimeController.html":{}}}],["app",{"_index":1138,"title":{},"body":{"index.html":{}}}],["application",{"_index":306,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{},"interfaces/ResponseInterface.html":{},"index.html":{}}}],["application/json",{"_index":494,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["applications",{"_index":1126,"title":{},"body":{"index.html":{}}}],["apply(loggermiddleware",{"_index":192,"title":{},"body":{"modules/AccountModule.html":{}}}],["argumentmetadata",{"_index":939,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":576,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["armored",{"_index":549,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["armoredkey",{"_index":554,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["armoredmessage",{"_index":565,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["armoredprivatekey",{"_index":485,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["armoredpublickey",{"_index":486,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["array",{"_index":953,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["async",{"_index":40,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/TokensService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["athenticate",{"_index":729,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["audience",{"_index":889,"title":{},"body":{"injectables/TokensService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":137,"title":{},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{}}}],["authenticate",{"_index":708,"title":{},"body":{"classes/LoginDto.html":{}}}],["authenticated",{"_index":282,"title":{},"body":{"interfaces/AccountToken.html":{}}}],["authentication",{"_index":278,"title":{},"body":{"interfaces/AccountToken.html":{},"classes/LoginDto.html":{},"modules/TokenModule.html":{}}}],["authenticationresponsedto",{"_index":87,"title":{"classes/AuthenticationResponseDto.html":{}},"body":{"controllers/AccountController.html":{},"classes/AuthenticationResponseDto.html":{},"coverage.html":{}}}],["authguard",{"_index":655,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["authguard('jwt",{"_index":658,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["authheader",{"_index":435,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["author",{"_index":1166,"title":{},"body":{"properties.html":{}}}],["authorized",{"_index":652,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["authorizes",{"_index":637,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["available",{"_index":1157,"title":{},"body":{"modules.html":{}}}],["await",{"_index":117,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/TokensService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":698,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"dependencies.html":{}}}],["axiosresponse",{"_index":470,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["backbone",{"_index":1163,"title":{},"body":{"properties.html":{}}}],["bad",{"_index":600,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["badrequestexception",{"_index":264,"title":{},"body":{"injectables/AccountService.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('email",{"_index":271,"title":{},"body":{"injectables/AccountService.html":{}}}],["badrequestexception('invalid",{"_index":753,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["badrequestexception('validation",{"_index":950,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["base_options",{"_index":886,"title":{},"body":{"injectables/TokensService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["based",{"_index":22,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/RefreshTokenPayload.html":{}}}],["bcrypt",{"_index":223,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{}}}],["bcrypt.compare(password",{"_index":267,"title":{},"body":{"injectables/AccountService.html":{}}}],["bcrypt.gensalt",{"_index":236,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["bcrypt.hash(uncryptedpass",{"_index":237,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["bcryptjs",{"_index":224,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"dependencies.html":{}}}],["bearer",{"_index":149,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountTokenResponseDto.html":{}}}],["before",{"_index":773,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["between",{"_index":501,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["binary",{"_index":552,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["body",{"_index":67,"title":{},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{},"injectables/SecurityMiddleware.html":{}}}],["body.refresh_token",{"_index":144,"title":{},"body":{"controllers/AccountController.html":{}}}],["boolean",{"_index":397,"title":{},"body":{"interfaces/DecryptedResponse.html":{},"interfaces/RefreshToken.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":1041,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1155,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1152,"title":{},"body":{"modules.html":{}}}],["buffer.concat(chunks).tostring('utf8",{"_index":793,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["buildresponsepayload",{"_index":41,"title":{},"body":{"controllers/AccountController.html":{}}}],["buildresponsepayload(account",{"_index":47,"title":{},"body":{"controllers/AccountController.html":{}}}],["byte2giga",{"_index":1021,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["byte2giga(bytes",{"_index":1105,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bytes",{"_index":1106,"title":{},"body":{"miscellaneous/functions.html":{}}}],["c20a03b",{"_index":985,"title":{},"body":{"changelog.html":{}}}],["callhandler",{"_index":830,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["casterror",{"_index":598,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch",{"_index":503,"title":{},"body":{"injectables/EncryptionService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/TokensService.html":{}}}],["catch(exception",{"_index":574,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["certificate",{"_index":490,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["certificationauthorityservice",{"_index":1190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["changelog",{"_index":957,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":959,"title":{},"body":{"changelog.html":{}}}],["character",{"_index":340,"title":{},"body":{"classes/CreateAccountDto.html":{},"miscellaneous/variables.html":{}}}],["characters",{"_index":1115,"title":{},"body":{"miscellaneous/functions.html":{}}}],["check",{"_index":612,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["checkemptyspacestring",{"_index":353,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkemptyspacestringerrmsg",{"_index":319,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checklowercasestring",{"_index":341,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checklowercasestringerrmsg",{"_index":342,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checklowercasestringerrmsg})@matches(checknumberstring",{"_index":316,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["checknumberstring",{"_index":344,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checknumberstringerrmsg",{"_index":347,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checknumberstringerrmsg})@matches(checkspecialstring",{"_index":317,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["checks",{"_index":634,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["checkspecialstring",{"_index":349,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkspecialstringerrmsg",{"_index":351,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkspecialstringerrmsg})@matches(checkemptyspacestring",{"_index":318,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["checkuppercasestring",{"_index":335,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkuppercasestringerrmsg",{"_index":337,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkuppercasestringerrmsg})@matches(checklowercasestring",{"_index":315,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["chunk",{"_index":791,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["chunks",{"_index":789,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["chunks.push(chunk",{"_index":792,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["class",{"_index":101,"title":{"classes/AccountResponseDto.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResponseEncryptionDto.html":{}},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"modules/DatabaseModule.html":{},"controllers/EncryptionController.html":{},"modules/EncryptionModule.html":{},"injectables/EncryptionService.html":{},"modules/HeimdallModule.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensRepository.html":{},"classes/ResponseEncryptionDto.html":{},"injectables/SecurityMiddleware.html":{},"modules/StitchModule.html":{},"modules/TestModule.html":{},"injectables/TimeoutInterceptor.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{},"controllers/UptimeController.html":{},"modules/UptimeModule.html":{},"modules/ValidationModule.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":242,"title":{},"body":{"classes/AccountResponseDto.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResponseEncryptionDto.html":{},"overview.html":{}}}],["clone",{"_index":1129,"title":{},"body":{"index.html":{}}}],["cloudwatchlogs",{"_index":696,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["cluster_accountmodule",{"_index":156,"title":{},"body":{"modules/AccountModule.html":{},"overview.html":{}}}],["cluster_accountmodule_exports",{"_index":158,"title":{},"body":{"modules/AccountModule.html":{},"overview.html":{}}}],["cluster_accountmodule_imports",{"_index":157,"title":{},"body":{"modules/AccountModule.html":{},"overview.html":{}}}],["cluster_accountmodule_providers",{"_index":159,"title":{},"body":{"modules/AccountModule.html":{},"overview.html":{}}}],["cluster_encryptionmodule",{"_index":445,"title":{},"body":{"modules/EncryptionModule.html":{},"overview.html":{}}}],["cluster_encryptionmodule_imports",{"_index":446,"title":{},"body":{"modules/EncryptionModule.html":{},"overview.html":{}}}],["cluster_encryptionmodule_providers",{"_index":447,"title":{},"body":{"modules/EncryptionModule.html":{},"overview.html":{}}}],["cluster_heimdallmodule",{"_index":521,"title":{},"body":{"modules/HeimdallModule.html":{},"overview.html":{}}}],["cluster_heimdallmodule_exports",{"_index":522,"title":{},"body":{"modules/HeimdallModule.html":{},"overview.html":{}}}],["cluster_heimdallmodule_providers",{"_index":523,"title":{},"body":{"modules/HeimdallModule.html":{},"overview.html":{}}}],["cluster_stitchmodule",{"_index":799,"title":{},"body":{"modules/StitchModule.html":{},"overview.html":{}}}],["cluster_stitchmodule_imports",{"_index":800,"title":{},"body":{"modules/StitchModule.html":{},"overview.html":{}}}],["cluster_tokenmodule",{"_index":842,"title":{},"body":{"modules/TokenModule.html":{},"overview.html":{}}}],["cluster_tokenmodule_exports",{"_index":844,"title":{},"body":{"modules/TokenModule.html":{},"overview.html":{}}}],["cluster_tokenmodule_providers",{"_index":843,"title":{},"body":{"modules/TokenModule.html":{},"overview.html":{}}}],["cluster_validationmodule",{"_index":927,"title":{},"body":{"modules/ValidationModule.html":{},"overview.html":{}}}],["cluster_validationmodule_providers",{"_index":928,"title":{},"body":{"modules/ValidationModule.html":{},"overview.html":{}}}],["code",{"_index":727,"title":{},"body":{"classes/RefreshTokenDto.html":{},"changelog.html":{}}}],["command",{"_index":1135,"title":{},"body":{"index.html":{}}}],["commit",{"_index":965,"title":{},"body":{"changelog.html":{}}}],["config",{"_index":329,"title":{},"body":{"classes/CreateAccountDto.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"modules/TokenModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["config.jwtexpirationtime",{"_index":686,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/TokenModule.html":{}}}],["config.jwtsecret",{"_index":683,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/TokenModule.html":{}}}],["config.maxpasswordlength",{"_index":334,"title":{},"body":{"classes/CreateAccountDto.html":{},"miscellaneous/variables.html":{}}}],["config.minpasswordlength",{"_index":332,"title":{},"body":{"classes/CreateAccountDto.html":{},"miscellaneous/variables.html":{}}}],["config.mongourl",{"_index":1197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.saltencrypt}/api/decrypt",{"_index":504,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["config.saltencrypt}/api/encrypt",{"_index":492,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["config.saltencrypt}/api/handshake",{"_index":509,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["config/config",{"_index":330,"title":{},"body":{"classes/CreateAccountDto.html":{},"injectables/EncryptionService.html":{},"injectables/JwtStrategy.html":{},"modules/TokenModule.html":{}}}],["configurations",{"_index":979,"title":{},"body":{"changelog.html":{}}}],["configure",{"_index":171,"title":{},"body":{"modules/AccountModule.html":{}}}],["configure(consumer",{"_index":172,"title":{},"body":{"modules/AccountModule.html":{}}}],["console.error(`${res.statuscode",{"_index":704,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log(exception",{"_index":605,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["const",{"_index":115,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"classes/CreateAccountDto.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/SecurityMiddleware.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TokensService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":105,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/EncryptionService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TokensService.html":{}}}],["constructor(account",{"_index":256,"title":{},"body":{"injectables/AccountService.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(accountmodel",{"_index":206,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["constructor(httpservice",{"_index":457,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["constructor(private",{"_index":430,"title":{},"body":{"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"injectables/TimeoutInterceptor.html":{}}}],["constructor(reflector",{"_index":826,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["constructor(refreshtokenmodel",{"_index":744,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["constructor(tokens",{"_index":863,"title":{},"body":{"injectables/TokensService.html":{}}}],["consumer",{"_index":175,"title":{},"body":{"modules/AccountModule.html":{}}}],["containing",{"_index":405,"title":{},"body":{"interfaces/EncryptedResponse.html":{}}}],["contains",{"_index":392,"title":{},"body":{"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"interfaces/HandshakeResponse.html":{}}}],["content",{"_index":394,"title":{},"body":{"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"injectables/EncryptionService.html":{}}}],["context",{"_index":642,"title":{},"body":{"injectables/JWTGuard.html":{},"injectables/TimeoutInterceptor.html":{}}}],["context.gethandler",{"_index":838,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":835,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["controller",{"_index":33,"title":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{},"controllers/UptimeController.html":{}},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{},"controllers/UptimeController.html":{},"coverage.html":{}}}],["controller('account",{"_index":100,"title":{},"body":{"controllers/AccountController.html":{}}}],["controller('encryption",{"_index":429,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["controllers",{"_index":35,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"controllers/EncryptionController.html":{},"modules/EncryptionModule.html":{},"modules/StitchModule.html":{},"controllers/UptimeController.html":{},"modules/UptimeModule.html":{},"overview.html":{}}}],["core",{"_index":764,"title":{},"body":{"interfaces/ResponseInterface.html":{}}}],["core/database/database.module",{"_index":804,"title":{},"body":{"modules/StitchModule.html":{}}}],["core/heimdall/heimdall.module",{"_index":813,"title":{},"body":{"modules/StitchModule.html":{}}}],["core/interfaces/response.interface",{"_index":95,"title":{},"body":{"controllers/AccountController.html":{}}}],["core/uptime/uptime.module",{"_index":805,"title":{},"body":{"modules/StitchModule.html":{}}}],["corretly",{"_index":768,"title":{},"body":{"interfaces/ResponseInterface.html":{}}}],["coverage",{"_index":986,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":202,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"properties.html":{}}}],["create(account",{"_index":210,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["create(createdto",{"_index":625,"title":{},"body":{"interfaces/IService.html":{}}}],["create(entity",{"_index":617,"title":{},"body":{"interfaces/IRepository.html":{}}}],["createaccesstokenfromrefreshtoken",{"_index":856,"title":{},"body":{"injectables/TokensService.html":{}}}],["createaccesstokenfromrefreshtoken(refresh",{"_index":866,"title":{},"body":{"injectables/TokensService.html":{}}}],["createaccountdto",{"_index":77,"title":{"classes/CreateAccountDto.html":{}},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/CreateAccountDto.html":{},"coverage.html":{}}}],["createdaccount",{"_index":238,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{}}}],["createdaccount.save",{"_index":240,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["createdecryptiondto",{"_index":365,"title":{"classes/CreateDecryptionDto.html":{}},"body":{"classes/CreateDecryptionDto.html":{},"controllers/EncryptionController.html":{},"coverage.html":{}}}],["createdto",{"_index":626,"title":{},"body":{"interfaces/IService.html":{}}}],["createencryptiondto",{"_index":373,"title":{"classes/CreateEncryptionDto.html":{}},"body":{"classes/CreateEncryptionDto.html":{},"controllers/EncryptionController.html":{},"coverage.html":{}}}],["createrefreshtoken",{"_index":742,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["createrefreshtoken(accountid",{"_index":747,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["createuserfromrequest",{"_index":254,"title":{},"body":{"injectables/AccountService.html":{}}}],["createuserfromrequest(request",{"_index":258,"title":{},"body":{"injectables/AccountService.html":{}}}],["creation",{"_index":304,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["credential",{"_index":718,"title":{},"body":{"interfaces/RefreshToken.html":{}}}],["credentials",{"_index":697,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["crew",{"_index":1167,"title":{},"body":{"properties.html":{}}}],["crypto",{"_index":777,"title":{},"body":{"injectables/SecurityMiddleware.html":{},"dependencies.html":{}}}],["crypto.aes.encrypt",{"_index":781,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["crypto.aes.encrypt(body",{"_index":795,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["cryptographic",{"_index":517,"title":{},"body":{"interfaces/HandshakeResponse.html":{}}}],["csv",{"_index":1076,"title":{},"body":{"dependencies.html":{}}}],["ctx",{"_index":583,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":585,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["curve",{"_index":540,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["curve25519",{"_index":541,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["customschemaproperties",{"_index":1170,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":123,"title":{},"body":{"controllers/AccountController.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"classes/ResponseEncryptionDto.html":{},"interfaces/ResponseInterface.html":{},"injectables/SecurityMiddleware.html":{}}}],["database.provider",{"_index":382,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databasemodule",{"_index":379,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/DatabaseModule.html":{},"modules/StitchModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseproviders",{"_index":381,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datatype",{"_index":765,"title":{},"body":{"interfaces/ResponseInterface.html":{}}}],["date",{"_index":414,"title":{},"body":{"controllers/EncryptionController.html":{},"interfaces/RefreshToken.html":{},"injectables/RefreshTokensRepository.html":{},"miscellaneous/variables.html":{}}}],["date(value",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decimal",{"_index":1107,"title":{},"body":{"miscellaneous/functions.html":{}}}],["decimal.js",{"_index":1063,"title":{},"body":{"dependencies.html":{}}}],["decoderefreshtoken",{"_index":857,"title":{},"body":{"injectables/TokensService.html":{}}}],["decoderefreshtoken(token",{"_index":868,"title":{},"body":{"injectables/TokensService.html":{}}}],["decorators",{"_index":61,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountResponseDto.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"controllers/EncryptionController.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResponseEncryptionDto.html":{},"controllers/UptimeController.html":{}}}],["decrypt",{"_index":409,"title":{},"body":{"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{}}}],["decrypt(encrypted",{"_index":528,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["decrypt(req",{"_index":411,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["decrypt(token",{"_index":462,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decrypted",{"_index":393,"title":{},"body":{"interfaces/DecryptedResponse.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{}}}],["decryptedresponse",{"_index":385,"title":{"interfaces/DecryptedResponse.html":{}},"body":{"interfaces/DecryptedResponse.html":{},"injectables/EncryptionService.html":{},"coverage.html":{}}}],["decrypting",{"_index":390,"title":{},"body":{"interfaces/DecryptedResponse.html":{}}}],["decryption",{"_index":400,"title":{},"body":{"interfaces/DecryptedResponse.html":{}}}],["decryption.dto.ts",{"_index":367,"title":{},"body":{"classes/CreateDecryptionDto.html":{},"coverage.html":{}}}],["decryption.dto.ts:12",{"_index":372,"title":{},"body":{"classes/CreateDecryptionDto.html":{}}}],["decryption.dto.ts:17",{"_index":370,"title":{},"body":{"classes/CreateDecryptionDto.html":{}}}],["decryptionkeys",{"_index":569,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["default",{"_index":1104,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":539,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["defined",{"_index":49,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensRepository.html":{},"classes/ResponseEncryptionDto.html":{},"injectables/SecurityMiddleware.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TokensService.html":{},"controllers/UptimeController.html":{},"injectables/ValidationPipe.html":{}}}],["dependencies",{"_index":155,"title":{"dependencies.html":{}},"body":{"modules/AccountModule.html":{},"modules/EncryptionModule.html":{},"modules/HeimdallModule.html":{},"modules/StitchModule.html":{},"modules/TokenModule.html":{},"modules/ValidationModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"modules/AccountModule.html":{},"interfaces/AccountToken.html":{},"classes/CreateAccountDto.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"interfaces/HandshakeResponse.html":{},"injectables/JWTGuard.html":{},"classes/LoginDto.html":{},"interfaces/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseInterface.html":{},"injectables/SecurityMiddleware.html":{},"modules/TokenModule.html":{},"properties.html":{}}}],["development",{"_index":1139,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1132,"title":{},"body":{"index.html":{}}}],["docker",{"_index":981,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":818,"title":{},"body":{"modules/StitchModule.html":{},"coverage.html":{}}}],["documented",{"_index":961,"title":{},"body":{"changelog.html":{}}}],["dotenv",{"_index":1065,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":112,"title":{},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{}}}],["during",{"_index":519,"title":{},"body":{"interfaces/HandshakeResponse.html":{},"injectables/JWTGuard.html":{}}}],["e",{"_index":907,"title":{},"body":{"injectables/TokensService.html":{}}}],["e2e",{"_index":1149,"title":{},"body":{"index.html":{}}}],["e9d66be",{"_index":974,"title":{},"body":{"changelog.html":{}}}],["ecc",{"_index":538,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["efficient",{"_index":1121,"title":{},"body":{"index.html":{}}}],["email",{"_index":27,"title":{},"body":{"interfaces/Account.html":{},"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"classes/CreateAccountDto.html":{},"injectables/HeimdallService.html":{},"classes/LoginDto.html":{},"miscellaneous/variables.html":{}}}],["embed",{"_index":738,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{}}}],["empty",{"_index":355,"title":{},"body":{"classes/CreateAccountDto.html":{},"miscellaneous/variables.html":{}}}],["encoded",{"_index":880,"title":{},"body":{"injectables/TokensService.html":{}}}],["encountered",{"_index":649,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["encription",{"_index":1125,"title":{},"body":{"index.html":{}}}],["encrypt",{"_index":410,"title":{},"body":{"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"injectables/SecurityMiddleware.html":{}}}],["encrypt(data",{"_index":532,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["encrypt(req",{"_index":418,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["encrypt(token",{"_index":464,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encrypted",{"_index":406,"title":{},"body":{"interfaces/EncryptedResponse.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{}}}],["encryptedbody",{"_index":794,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["encrypteddataprocessed",{"_index":437,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["encrypteddataprocessed.data",{"_index":440,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["encrypteddataprocessed.signature",{"_index":443,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["encryptedpayload",{"_index":488,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryptedresponse",{"_index":403,"title":{"interfaces/EncryptedResponse.html":{}},"body":{"interfaces/EncryptedResponse.html":{},"injectables/EncryptionService.html":{},"coverage.html":{}}}],["encrypting",{"_index":779,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["encryption",{"_index":368,"title":{},"body":{"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{}}}],["encryption.controller",{"_index":450,"title":{},"body":{"modules/EncryptionModule.html":{}}}],["encryption.dto",{"_index":425,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["encryption.dto.ts",{"_index":374,"title":{},"body":{"classes/CreateEncryptionDto.html":{},"classes/ResponseEncryptionDto.html":{},"coverage.html":{}}}],["encryption.dto.ts:13",{"_index":377,"title":{},"body":{"classes/CreateEncryptionDto.html":{}}}],["encryption.dto.ts:18",{"_index":376,"title":{},"body":{"classes/CreateEncryptionDto.html":{}}}],["encryption.dto.ts:6",{"_index":762,"title":{},"body":{"classes/ResponseEncryptionDto.html":{}}}],["encryption.service",{"_index":427,"title":{},"body":{"controllers/EncryptionController.html":{},"modules/EncryptionModule.html":{}}}],["encryptioncontroller",{"_index":407,"title":{"controllers/EncryptionController.html":{}},"body":{"controllers/EncryptionController.html":{},"modules/EncryptionModule.html":{},"coverage.html":{}}}],["encryptiondto",{"_index":412,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["encryptiondto.data",{"_index":439,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["encryptionkeys",{"_index":562,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["encryptionmodule",{"_index":444,"title":{"modules/EncryptionModule.html":{}},"body":{"modules/EncryptionModule.html":{},"modules/StitchModule.html":{},"modules.html":{},"overview.html":{}}}],["encryptionservice",{"_index":426,"title":{"injectables/EncryptionService.html":{}},"body":{"controllers/EncryptionController.html":{},"modules/EncryptionModule.html":{},"injectables/EncryptionService.html":{},"coverage.html":{},"overview.html":{}}}],["encrypts",{"_index":772,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["endpoint",{"_index":98,"title":{},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{}}}],["endpoint.ts",{"_index":992,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["endpoints",{"_index":614,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ResponseInterface.html":{}}}],["enoent",{"_index":603,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["entity",{"_index":609,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{}}}],["err",{"_index":648,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["err.message",{"_index":662,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["error",{"_index":64,"title":{},"body":{"controllers/AccountController.html":{},"injectables/EncryptionService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JWTGuard.html":{},"interfaces/ResponseInterface.html":{},"miscellaneous/typealiases.html":{}}}],["errorcode",{"_index":596,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ResponseInterface.html":{}}}],["errorname",{"_index":593,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ResponseInterface.html":{}}}],["errorpayload",{"_index":589,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errors",{"_index":947,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":949,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["example",{"_index":126,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountResponseDto.html":{},"classes/AccountTokenResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{}}}],["examples",{"_index":139,"title":{},"body":{"controllers/AccountController.html":{}}}],["exception",{"_index":578,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.code",{"_index":602,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":572,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:13",{"_index":577,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":587,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":592,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.name",{"_index":597,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception?.response?.error",{"_index":594,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception?.response?.message",{"_index":590,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception?.response?.message.join('\\n",{"_index":591,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":573,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["executioncontext",{"_index":643,"title":{},"body":{"injectables/JWTGuard.html":{},"injectables/TimeoutInterceptor.html":{}}}],["existingfromemail",{"_index":269,"title":{},"body":{"injectables/AccountService.html":{}}}],["expiration",{"_index":103,"title":{},"body":{"controllers/AccountController.html":{},"injectables/RefreshTokensRepository.html":{}}}],["expiration.settime(expiration.gettime",{"_index":759,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["expired",{"_index":140,"title":{},"body":{"controllers/AccountController.html":{},"injectables/TokensService.html":{}}}],["expires",{"_index":714,"title":{},"body":{"interfaces/RefreshToken.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":685,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{}}}],["export",{"_index":23,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"modules/DatabaseModule.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"controllers/EncryptionController.html":{},"modules/EncryptionModule.html":{},"injectables/EncryptionService.html":{},"interfaces/HandshakeResponse.html":{},"modules/HeimdallModule.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"interfaces/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/RefreshTokensRepository.html":{},"classes/ResponseEncryptionDto.html":{},"interfaces/ResponseInterface.html":{},"injectables/SecurityMiddleware.html":{},"modules/StitchModule.html":{},"modules/TestModule.html":{},"injectables/TimeoutInterceptor.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{},"controllers/UptimeController.html":{},"modules/UptimeModule.html":{},"modules/ValidationModule.html":{},"injectables/ValidationPipe.html":{}}}],["exports",{"_index":170,"title":{},"body":{"modules/AccountModule.html":{},"modules/DatabaseModule.html":{},"modules/HeimdallModule.html":{},"modules/TokenModule.html":{},"modules/ValidationModule.html":{}}}],["express",{"_index":581,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/SecurityMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":657,"title":{},"body":{"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":672,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":680,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.ey",{"_index":289,"title":{},"body":{"classes/AccountTokenResponseDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjpyxq",{"_index":291,"title":{},"body":{"classes/AccountTokenResponseDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjpyxqi",{"_index":735,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjpyxqi...'})@isnotempty({message",{"_index":732,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["failed",{"_index":951,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["false",{"_index":132,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountTokenResponseDto.html":{},"interfaces/DecryptedResponse.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokensRepository.html":{}}}],["false'].includes(value",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["features",{"_index":971,"title":{},"body":{"changelog.html":{}}}],["field",{"_index":719,"title":{},"body":{"interfaces/RefreshToken.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"modules/DatabaseModule.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"controllers/EncryptionController.html":{},"modules/EncryptionModule.html":{},"injectables/EncryptionService.html":{},"interfaces/HandshakeResponse.html":{},"modules/HeimdallModule.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"interfaces/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/RefreshTokensRepository.html":{},"classes/ResponseEncryptionDto.html":{},"interfaces/ResponseInterface.html":{},"injectables/SecurityMiddleware.html":{},"modules/StitchModule.html":{},"modules/TestModule.html":{},"injectables/TimeoutInterceptor.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{},"controllers/UptimeController.html":{},"modules/UptimeModule.html":{},"modules/ValidationModule.html":{},"injectables/ValidationPipe.html":{},"changelog.html":{},"coverage.html":{}}}],["filter",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filter[key",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["final",{"_index":978,"title":{},"body":{"changelog.html":{}}}],["findforemail",{"_index":203,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{}}}],["findforemail(email",{"_index":212,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{}}}],["findforid",{"_index":204,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{}}}],["findforid(id",{"_index":214,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{}}}],["findone",{"_index":205,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{}}}],["findone(email",{"_index":216,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["findone(id",{"_index":620,"title":{},"body":{"interfaces/IRepository.html":{},"interfaces/IService.html":{}}}],["findtokenbyid",{"_index":743,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["findtokenbyid(id",{"_index":750,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["finish",{"_index":972,"title":{},"body":{"changelog.html":{}}}],["firebase",{"_index":1067,"title":{},"body":{"dependencies.html":{}}}],["fixed",{"_index":975,"title":{},"body":{"changelog.html":{}}}],["following",{"_index":1134,"title":{},"body":{"index.html":{}}}],["format",{"_index":548,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["forroutes",{"_index":193,"title":{},"body":{"modules/AccountModule.html":{}}}],["forwardref",{"_index":179,"title":{},"body":{"modules/AccountModule.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{}}}],["found",{"_index":902,"title":{},"body":{"injectables/TokensService.html":{}}}],["function",{"_index":776,"title":{},"body":{"injectables/SecurityMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":1095,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generate",{"_index":527,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["generateaccesstoken",{"_index":858,"title":{},"body":{"injectables/TokensService.html":{}}}],["generateaccesstoken(account",{"_index":870,"title":{},"body":{"injectables/TokensService.html":{}}}],["generaterefreshtoken",{"_index":859,"title":{},"body":{"injectables/TokensService.html":{}}}],["generaterefreshtoken(account",{"_index":872,"title":{},"body":{"injectables/TokensService.html":{}}}],["generatetoken",{"_index":42,"title":{},"body":{"controllers/AccountController.html":{}}}],["generatetoken(account",{"_index":56,"title":{},"body":{"controllers/AccountController.html":{}}}],["getstoredtokenfromrefreshtokenpayload",{"_index":860,"title":{},"body":{"injectables/TokensService.html":{}}}],["getstoredtokenfromrefreshtokenpayload(payload",{"_index":874,"title":{},"body":{"injectables/TokensService.html":{}}}],["getting",{"_index":955,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["getuserfromrefreshtokenpayload",{"_index":861,"title":{},"body":{"injectables/TokensService.html":{}}}],["getuserfromrefreshtokenpayload(payload",{"_index":876,"title":{},"body":{"injectables/TokensService.html":{}}}],["giga2byte",{"_index":1022,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["giga2byte(gigas",{"_index":1108,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gigas",{"_index":1109,"title":{},"body":{"miscellaneous/functions.html":{}}}],["go",{"_index":610,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["graph",{"_index":1156,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":633,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["guidelines",{"_index":966,"title":{},"body":{"changelog.html":{}}}],["haimdallservice",{"_index":459,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["handlebars",{"_index":1070,"title":{},"body":{"dependencies.html":{}}}],["handlerequest",{"_index":640,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["handlerequest(err",{"_index":641,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["handles",{"_index":645,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["handshake",{"_index":508,"title":{},"body":{"injectables/EncryptionService.html":{},"interfaces/HandshakeResponse.html":{}}}],["handshakeresponse",{"_index":475,"title":{"interfaces/HandshakeResponse.html":{}},"body":{"injectables/EncryptionService.html":{},"interfaces/HandshakeResponse.html":{},"coverage.html":{}}}],["handshakeresponse.data.publickey",{"_index":487,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["header",{"_index":636,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["headers",{"_index":493,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["heimdall.service",{"_index":525,"title":{},"body":{"modules/HeimdallModule.html":{}}}],["heimdallmodule",{"_index":448,"title":{"modules/HeimdallModule.html":{}},"body":{"modules/EncryptionModule.html":{},"modules/HeimdallModule.html":{},"modules/StitchModule.html":{},"modules.html":{},"overview.html":{}}}],["heimdallservice",{"_index":460,"title":{"injectables/HeimdallService.html":{}},"body":{"injectables/EncryptionService.html":{},"modules/HeimdallModule.html":{},"injectables/HeimdallService.html":{},"coverage.html":{},"overview.html":{}}}],["host",{"_index":575,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":584,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":579,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":570,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpmodule",{"_index":451,"title":{},"body":{"modules/EncryptionModule.html":{}}}],["https://uplink.xyz",{"_index":888,"title":{},"body":{"injectables/TokensService.html":{},"miscellaneous/variables.html":{}}}],["httpservice",{"_index":458,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["httpstatus",{"_index":580,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":588,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["id",{"_index":29,"title":{},"body":{"interfaces/Account.html":{},"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JwtStrategy.html":{},"interfaces/RefreshToken.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/RefreshTokensRepository.html":{}}}],["identifier",{"_index":987,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":547,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["if(!signature",{"_index":499,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["ignoreexpiration",{"_index":681,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["imei",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imei.replace",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implementation",{"_index":973,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":191,"title":{},"body":{"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"classes/AccountTokenResponseDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/SecurityMiddleware.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["import",{"_index":80,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"modules/DatabaseModule.html":{},"controllers/EncryptionController.html":{},"modules/EncryptionModule.html":{},"injectables/EncryptionService.html":{},"modules/HeimdallModule.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensRepository.html":{},"classes/ResponseEncryptionDto.html":{},"injectables/SecurityMiddleware.html":{},"modules/StitchModule.html":{},"modules/TestModule.html":{},"injectables/TimeoutInterceptor.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{},"controllers/UptimeController.html":{},"modules/UptimeModule.html":{},"modules/ValidationModule.html":{},"injectables/ValidationPipe.html":{}}}],["imports",{"_index":169,"title":{},"body":{"modules/AccountModule.html":{},"modules/DatabaseModule.html":{},"modules/EncryptionModule.html":{},"modules/StitchModule.html":{},"modules/TestModule.html":{},"modules/TokenModule.html":{}}}],["include",{"_index":338,"title":{},"body":{"classes/CreateAccountDto.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"interfaces/HandshakeResponse.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"interfaces/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/RefreshTokensRepository.html":{},"classes/ResponseEncryptionDto.html":{},"interfaces/ResponseInterface.html":{},"injectables/SecurityMiddleware.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TokensService.html":{},"controllers/UptimeController.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexdefinition",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indicates",{"_index":398,"title":{},"body":{"interfaces/DecryptedResponse.html":{}}}],["indicator/http/axios.interfaces",{"_index":472,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"modules/DatabaseModule.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"controllers/EncryptionController.html":{},"modules/EncryptionModule.html":{},"injectables/EncryptionService.html":{},"interfaces/HandshakeResponse.html":{},"modules/HeimdallModule.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"interfaces/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/RefreshTokensRepository.html":{},"classes/ResponseEncryptionDto.html":{},"interfaces/ResponseInterface.html":{},"injectables/SecurityMiddleware.html":{},"modules/StitchModule.html":{},"modules/TestModule.html":{},"injectables/TimeoutInterceptor.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{},"controllers/UptimeController.html":{},"modules/UptimeModule.html":{},"modules/ValidationModule.html":{},"injectables/ValidationPipe.html":{}}}],["info.message",{"_index":663,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["inform",{"_index":720,"title":{},"body":{"interfaces/RefreshToken.html":{}}}],["information",{"_index":651,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["initiating",{"_index":516,"title":{},"body":{"interfaces/HandshakeResponse.html":{}}}],["inject",{"_index":882,"title":{},"body":{"injectables/TokensService.html":{}}}],["inject(forwardref",{"_index":890,"title":{},"body":{"injectables/TokensService.html":{}}}],["injectable",{"_index":199,"title":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/SecurityMiddleware.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TokensService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/SecurityMiddleware.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TokensService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":200,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/SecurityMiddleware.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TokensService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["injectmodel",{"_index":219,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/RefreshTokensRepository.html":{}}}],["injectmodel('account",{"_index":229,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["injectmodel('refreshtoken",{"_index":752,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["input",{"_index":561,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["install",{"_index":1128,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1127,"title":{},"body":{"index.html":{}}}],["installthis",{"_index":1137,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":586,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TokensService.html":{}}}],["instead",{"_index":284,"title":{},"body":{"interfaces/AccountToken.html":{}}}],["intends",{"_index":1162,"title":{},"body":{"properties.html":{}}}],["intercept",{"_index":825,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["intercept(context",{"_index":829,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["interceptor.ts",{"_index":824,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["interceptor.ts:11",{"_index":828,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["interceptor.ts:14",{"_index":831,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"interfaces/AccountToken.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"interfaces/HandshakeResponse.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"interfaces/RefreshToken.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseInterface.html":{}},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"interfaces/AccountToken.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"interfaces/HandshakeResponse.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"interfaces/RefreshToken.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"interfaces/AccountToken.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"interfaces/HandshakeResponse.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"interfaces/RefreshToken.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseInterface.html":{},"overview.html":{}}}],["interfaces/account",{"_index":222,"title":{},"body":{"injectables/AccountRepository.html":{},"classes/AccountTokenResponseDto.html":{},"injectables/JwtStrategy.html":{}}}],["interfaces/account/account.interface",{"_index":252,"title":{},"body":{"classes/AccountResponseDto.html":{}}}],["interfaces/response.interface",{"_index":582,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["interfaces/token",{"_index":676,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshTokensRepository.html":{}}}],["invalid",{"_index":113,"title":{},"body":{"controllers/AccountController.html":{},"injectables/JWTGuard.html":{}}}],["invalidate",{"_index":717,"title":{},"body":{"interfaces/RefreshToken.html":{}}}],["irepository",{"_index":227,"title":{"interfaces/IRepository.html":{}},"body":{"injectables/AccountRepository.html":{},"interfaces/IRepository.html":{},"coverage.html":{}}}],["is_revoked",{"_index":715,"title":{},"body":{"interfaces/RefreshToken.html":{},"miscellaneous/variables.html":{}}}],["isdefined",{"_index":327,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["isemail",{"_index":322,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{}}}],["isemail()@isnotempty()@apiproperty({description",{"_index":305,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["isemail()@minlength(5)@isnotempty()@apiproperty({description",{"_index":707,"title":{},"body":{"classes/LoginDto.html":{}}}],["iservice",{"_index":622,"title":{"interfaces/IService.html":{}},"body":{"interfaces/IService.html":{},"coverage.html":{}}}],["isnan(date.parse(value",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isnan(value",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isnotempty",{"_index":324,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{}}}],["isnotempty()@isobject()@apiproperty",{"_index":375,"title":{},"body":{"classes/CreateEncryptionDto.html":{}}}],["isnotempty()@isstring()@apiproperty",{"_index":369,"title":{},"body":{"classes/CreateDecryptionDto.html":{}}}],["isobject",{"_index":378,"title":{},"body":{"classes/CreateEncryptionDto.html":{}}}],["isstring",{"_index":321,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"classes/LoginDto.html":{}}}],["isstring()@isnotempty()@apiproperty",{"_index":371,"title":{},"body":{"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{}}}],["isstring()@minlength(5)@isnotempty()@apiproperty({description",{"_index":710,"title":{},"body":{"classes/LoginDto.html":{}}}],["isstring()@minlength(min_password_length)@maxlength(max_password_length)@isnotempty()@apiproperty({description",{"_index":309,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["issuer",{"_index":887,"title":{},"body":{"injectables/TokensService.html":{},"miscellaneous/variables.html":{}}}],["isvalidobjectid",{"_index":220,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/RefreshTokensRepository.html":{}}}],["isvalidobjectid(accountid",{"_index":755,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["isvalidobjectid(id",{"_index":231,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/RefreshTokensRepository.html":{}}}],["join",{"_index":809,"title":{},"body":{"modules/StitchModule.html":{}}}],["join(__dirname",{"_index":817,"title":{},"body":{"modules/StitchModule.html":{}}}],["js",{"_index":778,"title":{},"body":{"injectables/SecurityMiddleware.html":{},"dependencies.html":{}}}],["json.parse(parseddecription",{"_index":506,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["json.stringify(data",{"_index":560,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["json.stringify(req.body",{"_index":782,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["jsonwebtoken",{"_index":884,"title":{},"body":{"injectables/TokensService.html":{},"dependencies.html":{}}}],["jti",{"_index":737,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{}}}],["jwt",{"_index":635,"title":{},"body":{"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TokensService.html":{},"dependencies.html":{}}}],["jwtexpirationtime",{"_index":1184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":679,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtguard",{"_index":631,"title":{"injectables/JWTGuard.html":{}},"body":{"injectables/JWTGuard.html":{},"coverage.html":{}}}],["jwtid",{"_index":897,"title":{},"body":{"injectables/TokensService.html":{}}}],["jwtmodule",{"_index":846,"title":{},"body":{"modules/TokenModule.html":{}}}],["jwtmodule.register",{"_index":854,"title":{},"body":{"modules/TokenModule.html":{}}}],["jwtsecret",{"_index":1186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtservice",{"_index":864,"title":{},"body":{"injectables/TokensService.html":{}}}],["jwtstrategy",{"_index":665,"title":{"injectables/JwtStrategy.html":{}},"body":{"injectables/JwtStrategy.html":{},"modules/TokenModule.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":512,"title":{},"body":{"injectables/EncryptionService.html":{},"interfaces/HandshakeResponse.html":{},"injectables/HeimdallService.html":{},"injectables/SecurityMiddleware.html":{},"miscellaneous/variables.html":{}}}],["key').tostring",{"_index":796,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["keyguard",{"_index":1013,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["lastvaluefrom",{"_index":473,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["lastvaluefrom(handshake",{"_index":514,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["lastvaluefrom>(certificate",{"_index":495,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["length",{"_index":1116,"title":{},"body":{"miscellaneous/functions.html":{}}}],["license",{"_index":1164,"title":{},"body":{"properties.html":{}}}],["listener",{"_index":786,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["literal",{"_index":1173,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["live",{"_index":287,"title":{},"body":{"interfaces/AccountToken.html":{}}}],["local",{"_index":1084,"title":{},"body":{"dependencies.html":{}}}],["loggermiddleware",{"_index":187,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/AccountModule.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["login",{"_index":44,"title":{},"body":{"controllers/AccountController.html":{},"classes/LoginDto.html":{}}}],["login(body",{"_index":59,"title":{},"body":{"controllers/AccountController.html":{}}}],["logindto",{"_index":60,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AccountController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["lowercase",{"_index":343,"title":{},"body":{"classes/CreateAccountDto.html":{},"miscellaneous/variables.html":{}}}],["malformed",{"_index":141,"title":{},"body":{"controllers/AccountController.html":{},"injectables/TokensService.html":{}}}],["managing",{"_index":166,"title":{},"body":{"modules/AccountModule.html":{},"modules/TokenModule.html":{}}}],["matches",{"_index":326,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["matches(checkemptyspacestring",{"_index":364,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["matches(checklowercasestring",{"_index":361,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["matches(checknumberstring",{"_index":362,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["matches(checkspecialstring",{"_index":363,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["matches(checkuppercasestring",{"_index":360,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["matching",{"_index":25,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"modules/DatabaseModule.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"controllers/EncryptionController.html":{},"modules/EncryptionModule.html":{},"injectables/EncryptionService.html":{},"interfaces/HandshakeResponse.html":{},"modules/HeimdallModule.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"interfaces/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/RefreshTokensRepository.html":{},"classes/ResponseEncryptionDto.html":{},"interfaces/ResponseInterface.html":{},"injectables/SecurityMiddleware.html":{},"modules/StitchModule.html":{},"modules/TestModule.html":{},"injectables/TimeoutInterceptor.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{},"controllers/UptimeController.html":{},"modules/UptimeModule.html":{},"modules/ValidationModule.html":{},"injectables/ValidationPipe.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max_password_length",{"_index":333,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":312,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{}}}],["maxlength",{"_index":325,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["maxlength(max_password_length",{"_index":358,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["maxpasswordlength",{"_index":1193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":125,"title":{},"body":{"controllers/AccountController.html":{},"classes/CreateAccountDto.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JWTGuard.html":{},"classes/RefreshTokenDto.html":{},"interfaces/ResponseInterface.html":{}}}],["metadata",{"_index":1087,"title":{},"body":{"dependencies.html":{}}}],["metatype",{"_index":937,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":195,"title":{},"body":{"modules/AccountModule.html":{},"injectables/JWTGuard.html":{}}}],["methods",{"_index":38,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/SecurityMiddleware.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TokensService.html":{},"controllers/UptimeController.html":{},"injectables/ValidationPipe.html":{}}}],["middleware",{"_index":775,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["middlewareconsumer",{"_index":173,"title":{},"body":{"modules/AccountModule.html":{}}}],["miliseconds2seconds",{"_index":1024,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["miliseconds2seconds(milliseconds",{"_index":1110,"title":{},"body":{"miscellaneous/functions.html":{}}}],["milliseconds",{"_index":1111,"title":{},"body":{"miscellaneous/functions.html":{}}}],["min_password_length",{"_index":331,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["minimum",{"_index":310,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{}}}],["minlength",{"_index":323,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{}}}],["minlength(5",{"_index":712,"title":{},"body":{"classes/LoginDto.html":{}}}],["minlength(min_password_length",{"_index":357,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["minpasswordlength",{"_index":1192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":1094,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1142,"title":{},"body":{"index.html":{}}}],["model",{"_index":207,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/RefreshTokensRepository.html":{},"miscellaneous/variables.html":{}}}],["modelguard",{"_index":225,"title":{},"body":{"injectables/AccountRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modelregexquery",{"_index":1014,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":152,"title":{"modules/AccountModule.html":{},"modules/DatabaseModule.html":{},"modules/EncryptionModule.html":{},"modules/HeimdallModule.html":{},"modules/StitchModule.html":{},"modules/TestModule.html":{},"modules/TokenModule.html":{},"modules/UptimeModule.html":{},"modules/ValidationModule.html":{}},"body":{"modules/AccountModule.html":{},"modules/DatabaseModule.html":{},"modules/EncryptionModule.html":{},"modules/HeimdallModule.html":{},"modules/StitchModule.html":{},"modules/TestModule.html":{},"modules/TokenModule.html":{},"modules/UptimeModule.html":{},"modules/ValidationModule.html":{}}}],["modules",{"_index":154,"title":{"modules.html":{}},"body":{"modules/AccountModule.html":{},"modules/DatabaseModule.html":{},"modules/EncryptionModule.html":{},"modules/HeimdallModule.html":{},"modules/StitchModule.html":{},"modules/TestModule.html":{},"modules/TokenModule.html":{},"modules/UptimeModule.html":{},"modules/ValidationModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/account/account.module",{"_index":803,"title":{},"body":{"modules/StitchModule.html":{}}}],["modules/account/account.service",{"_index":675,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["modules/encryption/encryption.module",{"_index":812,"title":{},"body":{"modules/StitchModule.html":{}}}],["moment",{"_index":1072,"title":{},"body":{"dependencies.html":{}}}],["mongoose",{"_index":221,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/RefreshTokensRepository.html":{},"dependencies.html":{}}}],["mongoose.createconnection(config.mongourl",{"_index":1199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose.schema",{"_index":1183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose.schema.types.objectid",{"_index":1229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":185,"title":{},"body":{"modules/AccountModule.html":{},"modules/DatabaseModule.html":{},"modules/TestModule.html":{},"modules/TokenModule.html":{}}}],["mongoosemodule.forfeature",{"_index":189,"title":{},"body":{"modules/AccountModule.html":{},"modules/TokenModule.html":{}}}],["mongoosemodule.forroot(`mongodb://localhost:27017/test",{"_index":821,"title":{},"body":{"modules/TestModule.html":{}}}],["mongoosemodule.forroot(config.mongourl",{"_index":384,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mongourl",{"_index":1188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multiple",{"_index":546,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["name",{"_index":52,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/SecurityMiddleware.html":{},"injectables/TimeoutInterceptor.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["navigate",{"_index":1130,"title":{},"body":{"index.html":{}}}],["need",{"_index":285,"title":{},"body":{"interfaces/AccountToken.html":{},"classes/RefreshTokenDto.html":{}}}],["nest",{"_index":1075,"title":{},"body":{"dependencies.html":{}}}],["nestinterceptor",{"_index":833,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["nestjs/axios",{"_index":452,"title":{},"body":{"modules/EncryptionModule.html":{},"injectables/EncryptionService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":84,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"modules/DatabaseModule.html":{},"controllers/EncryptionController.html":{},"modules/EncryptionModule.html":{},"injectables/EncryptionService.html":{},"modules/HeimdallModule.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/SecurityMiddleware.html":{},"modules/StitchModule.html":{},"modules/TestModule.html":{},"injectables/TimeoutInterceptor.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{},"controllers/UptimeController.html":{},"modules/UptimeModule.html":{},"modules/ValidationModule.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":834,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":847,"title":{},"body":{"modules/TokenModule.html":{},"injectables/TokensService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":186,"title":{},"body":{"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"modules/DatabaseModule.html":{},"injectables/RefreshTokensRepository.html":{},"modules/TestModule.html":{},"modules/TokenModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":656,"title":{},"body":{"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1048,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":811,"title":{},"body":{"modules/StitchModule.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":807,"title":{},"body":{"modules/StitchModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":90,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountResponseDto.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"controllers/EncryptionController.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResponseEncryptionDto.html":{},"controllers/UptimeController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1052,"title":{},"body":{"dependencies.html":{}}}],["nestjs/terminus/dist/health",{"_index":471,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["nestjs/typeorm",{"_index":1054,"title":{},"body":{"dependencies.html":{}}}],["nestmiddleware",{"_index":695,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/SecurityMiddleware.html":{}}}],["nestmodule",{"_index":177,"title":{},"body":{"modules/AccountModule.html":{}}}],["new",{"_index":134,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"injectables/JWTGuard.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/TokensService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":692,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/SecurityMiddleware.html":{},"injectables/TimeoutInterceptor.html":{}}}],["next.handle",{"_index":841,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["nextfunction",{"_index":693,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/SecurityMiddleware.html":{}}}],["nodemailer",{"_index":1079,"title":{},"body":{"dependencies.html":{}}}],["normalized",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["normalized[key",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["normalizefilter",{"_index":1003,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["normalizeimei",{"_index":1004,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["normalizesort",{"_index":1005,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["notable",{"_index":958,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":1136,"title":{},"body":{"index.html":{}}}],["null",{"_index":687,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["number",{"_index":104,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/RefreshTokensRepository.html":{},"interfaces/ResponseInterface.html":{},"injectables/TokensService.html":{},"controllers/UptimeController.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["numbercharacter",{"_index":1010,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["numbers",{"_index":348,"title":{},"body":{"classes/CreateAccountDto.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":303,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateEncryptionDto.html":{},"interfaces/DecryptedResponse.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"injectables/JWTGuard.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResponseEncryptionDto.html":{},"injectables/SecurityMiddleware.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":832,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["oldend",{"_index":787,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["oldend.call(res",{"_index":797,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["openpgp",{"_index":535,"title":{},"body":{"injectables/HeimdallService.html":{},"dependencies.html":{}}}],["openpgp.createmessage",{"_index":557,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["openpgp.decrypt",{"_index":567,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["openpgp.encrypt",{"_index":556,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["openpgp.generatekey",{"_index":537,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["openpgp.readkey",{"_index":555,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["openpgp.readmessage",{"_index":564,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["openpgp.readprivatekey",{"_index":553,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["optional",{"_index":28,"title":{},"body":{"interfaces/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"interfaces/RefreshToken.html":{},"injectables/RefreshTokensRepository.html":{},"interfaces/ResponseInterface.html":{},"injectables/SecurityMiddleware.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TokensService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":551,"title":{},"body":{"injectables/HeimdallService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["opts",{"_index":893,"title":{},"body":{"injectables/TokensService.html":{}}}],["order",{"_index":730,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["otherwise",{"_index":402,"title":{},"body":{"interfaces/DecryptedResponse.html":{}}}],["out",{"_index":164,"title":{},"body":{"modules/AccountModule.html":{},"modules/EncryptionModule.html":{},"modules/HeimdallModule.html":{},"modules/StitchModule.html":{},"modules/TokenModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["output",{"_index":550,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["overview",{"_index":1158,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":976,"title":{"dependencies.html":{},"properties.html":{}},"body":{"changelog.html":{}}}],["param",{"_index":659,"title":{},"body":{"injectables/JWTGuard.html":{},"injectables/SecurityMiddleware.html":{}}}],["parameters",{"_index":51,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/SecurityMiddleware.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TokensService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":613,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["parse",{"_index":566,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["parseddecription",{"_index":505,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["parsefloat((x",{"_index":1227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsefloat(value",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(sort[key",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsenumber",{"_index":1016,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["parser",{"_index":1077,"title":{},"body":{"dependencies.html":{}}}],["partial",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pass",{"_index":545,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["passes",{"_index":646,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["passing",{"_index":774,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["passport",{"_index":674,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":671,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":677,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":30,"title":{},"body":{"interfaces/Account.html":{},"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":194,"title":{},"body":{"modules/AccountModule.html":{},"modules/StitchModule.html":{}}}],["pattern",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":121,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/AccountToken.html":{},"classes/AuthenticationResponseDto.html":{},"injectables/JwtStrategy.html":{},"interfaces/ResponseInterface.html":{},"injectables/TokensService.html":{}}}],["payload.interface.ts",{"_index":8,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/RefreshTokenPayload.html":{},"coverage.html":{}}}],["payload.jti",{"_index":912,"title":{},"body":{"injectables/TokensService.html":{}}}],["payload.sub",{"_index":909,"title":{},"body":{"injectables/TokensService.html":{}}}],["performhandshake",{"_index":455,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["performhandshake(token",{"_index":466,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["pick",{"_index":245,"title":{},"body":{"classes/AccountResponseDto.html":{}}}],["pipetransform",{"_index":942,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plain",{"_index":396,"title":{},"body":{"interfaces/DecryptedResponse.html":{}}}],["plaintoclass",{"_index":943,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":946,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["platform",{"_index":32,"title":{},"body":{"interfaces/Account.html":{},"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{}}}],["post",{"_index":81,"title":{},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{}}}],["post('/decrypt",{"_index":441,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["post('/encrypt",{"_index":434,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["post('/login",{"_index":128,"title":{},"body":{"controllers/AccountController.html":{}}}],["post('/refresh",{"_index":142,"title":{},"body":{"controllers/AccountController.html":{}}}],["prefix",{"_index":37,"title":{},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{},"controllers/UptimeController.html":{}}}],["private",{"_index":39,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/EncryptionService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/TokensService.html":{},"injectables/ValidationPipe.html":{}}}],["privatekey",{"_index":478,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{}}}],["privatekeyarmored",{"_index":529,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["process",{"_index":520,"title":{},"body":{"interfaces/HandshakeResponse.html":{},"classes/HttpExceptionFilter.html":{}}}],["process.env.certification_authority_service",{"_index":1191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_expiration_time",{"_index":1185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":1187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongo_url",{"_index":1189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.salt_service",{"_index":1195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env[`${token}_api_public",{"_index":482,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["process.env[`${token}_api_secret",{"_index":481,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["process.uptime",{"_index":922,"title":{},"body":{"controllers/UptimeController.html":{}}}],["processed",{"_index":767,"title":{},"body":{"interfaces/ResponseInterface.html":{}}}],["production",{"_index":1144,"title":{},"body":{"index.html":{}}}],["project",{"_index":960,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["project's",{"_index":1131,"title":{},"body":{"index.html":{}}}],["promise",{"_index":55,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/TokensService.html":{},"miscellaneous/variables.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"interfaces/HandshakeResponse.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RefreshTokenPayload.html":{},"classes/ResponseEncryptionDto.html":{},"interfaces/ResponseInterface.html":{},"injectables/TokensService.html":{},"properties.html":{}}}],["proprietary",{"_index":1165,"title":{},"body":{"properties.html":{}}}],["protected",{"_index":638,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["provide",{"_index":1196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":518,"title":{},"body":{"interfaces/HandshakeResponse.html":{}}}],["providers",{"_index":168,"title":{},"body":{"modules/AccountModule.html":{},"modules/DatabaseModule.html":{},"modules/EncryptionModule.html":{},"modules/HeimdallModule.html":{},"modules/TokenModule.html":{},"modules/ValidationModule.html":{}}}],["public",{"_index":43,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/EncryptionService.html":{},"interfaces/HandshakeResponse.html":{},"injectables/HeimdallService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokensService.html":{}}}],["publickey",{"_index":479,"title":{},"body":{"injectables/EncryptionService.html":{},"interfaces/HandshakeResponse.html":{},"injectables/HeimdallService.html":{}}}],["publickeyarmored",{"_index":530,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["putlogeventsrequest",{"_index":700,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["queries",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queries.push",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["random",{"_index":1007,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["random(length",{"_index":1114,"title":{},"body":{"miscellaneous/functions.html":{}}}],["randomnumber",{"_index":1008,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["randomnumber(length",{"_index":1117,"title":{},"body":{"miscellaneous/functions.html":{}}}],["randomstring",{"_index":1009,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["randomstring(length",{"_index":1118,"title":{},"body":{"miscellaneous/functions.html":{}}}],["readonly",{"_index":102,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TokensService.html":{}}}],["recieve",{"_index":728,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["record",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref",{"_index":1230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reference",{"_index":716,"title":{},"body":{"interfaces/RefreshToken.html":{}}}],["reflect",{"_index":1086,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":827,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["refresh",{"_index":45,"title":{},"body":{"controllers/AccountController.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RefreshTokenPayload.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{}}}],["refresh(body",{"_index":68,"title":{},"body":{"controllers/AccountController.html":{}}}],["refresh_token",{"_index":150,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtoken",{"_index":48,"title":{"interfaces/RefreshToken.html":{}},"body":{"controllers/AccountController.html":{},"interfaces/RefreshToken.html":{},"injectables/RefreshTokensRepository.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{},"coverage.html":{}}}],["refreshtokendto",{"_index":69,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AccountController.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenmodel",{"_index":746,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["refreshtokenpayload",{"_index":736,"title":{"interfaces/RefreshTokenPayload.html":{}},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"coverage.html":{}}}],["refreshtokenschema",{"_index":848,"title":{},"body":{"modules/TokenModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtokensrepository",{"_index":739,"title":{"injectables/RefreshTokensRepository.html":{}},"body":{"injectables/RefreshTokensRepository.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{},"coverage.html":{},"overview.html":{}}}],["regex",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["register",{"_index":46,"title":{},"body":{"controllers/AccountController.html":{},"classes/CreateAccountDto.html":{}}}],["register(body",{"_index":76,"title":{},"body":{"controllers/AccountController.html":{}}}],["replace",{"_index":1228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":984,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["represents",{"_index":388,"title":{},"body":{"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"interfaces/HandshakeResponse.html":{}}}],["req",{"_index":417,"title":{},"body":{"controllers/EncryptionController.html":{},"injectables/LoggerMiddleware.html":{},"injectables/SecurityMiddleware.html":{}}}],["req.body",{"_index":780,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["req.headers.authorization",{"_index":436,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["req.url}\\n",{"_index":705,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["request",{"_index":82,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"controllers/EncryptionController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JWTGuard.html":{},"injectables/LoggerMiddleware.html":{},"classes/RefreshTokenDto.html":{},"injectables/SecurityMiddleware.html":{}}}],["requested",{"_index":653,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["requestmethod",{"_index":178,"title":{},"body":{"modules/AccountModule.html":{}}}],["requestmethod.post",{"_index":196,"title":{},"body":{"modules/AccountModule.html":{}}}],["required",{"_index":138,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountTokenResponseDto.html":{},"classes/RefreshTokenDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":691,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/SecurityMiddleware.html":{}}}],["res.end",{"_index":788,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["res.on('finish",{"_index":702,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["res.statuscode",{"_index":703,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["res.write",{"_index":790,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["reset",{"_index":163,"title":{},"body":{"modules/AccountModule.html":{},"modules/EncryptionModule.html":{},"modules/HeimdallModule.html":{},"modules/StitchModule.html":{},"modules/TokenModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["resolverefreshtoken",{"_index":862,"title":{},"body":{"injectables/TokensService.html":{}}}],["resolverefreshtoken(encoded",{"_index":878,"title":{},"body":{"injectables/TokensService.html":{}}}],["resource",{"_index":654,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["response",{"_index":279,"title":{},"body":{"interfaces/AccountToken.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"injectables/EncryptionService.html":{},"interfaces/HandshakeResponse.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"interfaces/ResponseInterface.html":{},"injectables/SecurityMiddleware.html":{},"injectables/TimeoutInterceptor.html":{}}}],["response.dto",{"_index":299,"title":{},"body":{"classes/AuthenticationResponseDto.html":{}}}],["response.dto.ts",{"_index":244,"title":{},"body":{"classes/AccountResponseDto.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:10",{"_index":298,"title":{},"body":{"classes/AuthenticationResponseDto.html":{}}}],["response.dto.ts:11",{"_index":248,"title":{},"body":{"classes/AccountResponseDto.html":{}}}],["response.dto.ts:15",{"_index":290,"title":{},"body":{"classes/AccountTokenResponseDto.html":{}}}],["response.dto.ts:18",{"_index":294,"title":{},"body":{"classes/AccountTokenResponseDto.html":{}}}],["response.dto.ts:6",{"_index":295,"title":{},"body":{"classes/AccountTokenResponseDto.html":{}}}],["response.dto.ts:7",{"_index":297,"title":{},"body":{"classes/AuthenticationResponseDto.html":{}}}],["response.dto.ts:8",{"_index":250,"title":{},"body":{"classes/AccountResponseDto.html":{}}}],["response.dto.ts:9",{"_index":292,"title":{},"body":{"classes/AccountTokenResponseDto.html":{}}}],["response.interface.ts",{"_index":387,"title":{},"body":{"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"interfaces/HandshakeResponse.html":{},"coverage.html":{}}}],["response.settimeout(timeout",{"_index":840,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["response.status(400).json",{"_index":599,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(422).json",{"_index":606,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(status).json(errorpayload",{"_index":615,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["responseencryptiondto",{"_index":423,"title":{"classes/ResponseEncryptionDto.html":{}},"body":{"controllers/EncryptionController.html":{},"classes/ResponseEncryptionDto.html":{},"coverage.html":{}}}],["responseinterface",{"_index":94,"title":{"interfaces/ResponseInterface.html":{}},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ResponseInterface.html":{},"coverage.html":{}}}],["responseinterfacestatus",{"_index":766,"title":{},"body":{"interfaces/ResponseInterface.html":{},"miscellaneous/typealiases.html":{}}}],["results",{"_index":24,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"modules/DatabaseModule.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"controllers/EncryptionController.html":{},"modules/EncryptionModule.html":{},"injectables/EncryptionService.html":{},"interfaces/HandshakeResponse.html":{},"modules/HeimdallModule.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"interfaces/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/RefreshTokensRepository.html":{},"classes/ResponseEncryptionDto.html":{},"interfaces/ResponseInterface.html":{},"injectables/SecurityMiddleware.html":{},"modules/StitchModule.html":{},"modules/TestModule.html":{},"injectables/TimeoutInterceptor.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{},"controllers/UptimeController.html":{},"modules/UptimeModule.html":{},"modules/ValidationModule.html":{},"injectables/ValidationPipe.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":650,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["return",{"_index":20,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TokensService.html":{},"controllers/UptimeController.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":54,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/SecurityMiddleware.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TokensService.html":{},"controllers/UptimeController.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["revocationcertificate",{"_index":536,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["revoked",{"_index":721,"title":{},"body":{"interfaces/RefreshToken.html":{},"injectables/TokensService.html":{}}}],["root",{"_index":916,"title":{},"body":{"controllers/UptimeController.html":{},"index.html":{}}}],["rootpath",{"_index":816,"title":{},"body":{"modules/StitchModule.html":{}}}],["routes",{"_index":639,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["run",{"_index":1133,"title":{},"body":{"index.html":{}}}],["running",{"_index":980,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["rxjs",{"_index":474,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/TimeoutInterceptor.html":{},"dependencies.html":{}}}],["s",{"_index":354,"title":{},"body":{"classes/CreateAccountDto.html":{},"miscellaneous/variables.html":{}}}],["salt",{"_index":235,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["saltencrypt",{"_index":1194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalable",{"_index":1122,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":810,"title":{},"body":{"modules/StitchModule.html":{}}}],["schedulemodule.forroot",{"_index":814,"title":{},"body":{"modules/StitchModule.html":{}}}],["schema",{"_index":190,"title":{},"body":{"modules/AccountModule.html":{},"modules/TokenModule.html":{}}}],["sdk",{"_index":699,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"dependencies.html":{}}}],["sdk/clients/cloudwatchlogs",{"_index":701,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["search",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seconds",{"_index":1113,"title":{},"body":{"miscellaneous/functions.html":{}}}],["seconds2miliseconds",{"_index":1025,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seconds2miliseconds(seconds",{"_index":1112,"title":{},"body":{"miscellaneous/functions.html":{}}}],["secret",{"_index":783,"title":{},"body":{"injectables/SecurityMiddleware.html":{},"modules/TokenModule.html":{}}}],["secretorkey",{"_index":682,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["securitymiddleware",{"_index":769,"title":{"injectables/SecurityMiddleware.html":{}},"body":{"injectables/SecurityMiddleware.html":{},"coverage.html":{}}}],["see",{"_index":962,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":511,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["server",{"_index":1123,"title":{},"body":{"index.html":{}}}],["servergeneratekeys",{"_index":456,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["servergeneratekeys(token",{"_index":468,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["servestaticmodule",{"_index":806,"title":{},"body":{"modules/StitchModule.html":{}}}],["servestaticmodule.forroot",{"_index":815,"title":{},"body":{"modules/StitchModule.html":{}}}],["service",{"_index":502,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["session",{"_index":734,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["setmetadata('request",{"_index":1231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setrequesttimeout",{"_index":995,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setrequesttimeout(timeout",{"_index":1119,"title":{},"body":{"miscellaneous/functions.html":{}}}],["settimeout",{"_index":996,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["shared/dto/account",{"_index":88,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["shared/interfaces/account",{"_index":93,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"injectables/TokensService.html":{}}}],["shared/interfaces/token",{"_index":885,"title":{},"body":{"injectables/TokensService.html":{}}}],["shared/repositories/account",{"_index":265,"title":{},"body":{"injectables/AccountService.html":{},"injectables/TokensService.html":{}}}],["shared/repositories/token",{"_index":850,"title":{},"body":{"modules/TokenModule.html":{},"injectables/TokensService.html":{}}}],["shared/schemas/token",{"_index":849,"title":{},"body":{"modules/TokenModule.html":{}}}],["shared/strategies/jwt.strategy",{"_index":851,"title":{},"body":{"modules/TokenModule.html":{}}}],["side",{"_index":1124,"title":{},"body":{"index.html":{}}}],["signature",{"_index":391,"title":{},"body":{"interfaces/DecryptedResponse.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{}}}],["signatures",{"_index":496,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/HeimdallService.html":{}}}],["signatures[0].verified",{"_index":498,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["signed",{"_index":401,"title":{},"body":{"interfaces/DecryptedResponse.html":{}}}],["signingkeys",{"_index":563,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["signoptions",{"_index":684,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{},"miscellaneous/variables.html":{}}}],["slice(0",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["something",{"_index":431,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["sort",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"modules/DatabaseModule.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"controllers/EncryptionController.html":{},"modules/EncryptionModule.html":{},"injectables/EncryptionService.html":{},"interfaces/HandshakeResponse.html":{},"modules/HeimdallModule.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"interfaces/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/RefreshTokensRepository.html":{},"classes/ResponseEncryptionDto.html":{},"interfaces/ResponseInterface.html":{},"injectables/SecurityMiddleware.html":{},"modules/StitchModule.html":{},"modules/TestModule.html":{},"injectables/TimeoutInterceptor.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{},"controllers/UptimeController.html":{},"modules/UptimeModule.html":{},"modules/ValidationModule.html":{},"injectables/ValidationPipe.html":{}}}],["spaces",{"_index":356,"title":{},"body":{"classes/CreateAccountDto.html":{},"miscellaneous/variables.html":{}}}],["special",{"_index":352,"title":{},"body":{"classes/CreateAccountDto.html":{},"miscellaneous/variables.html":{}}}],["src/.../account.schema.ts",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api",{"_index":1096,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../bytes.ts",{"_index":1098,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../config.ts",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.provider.ts",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../formatter.ts",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../generators.ts",{"_index":1100,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1097,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../model.ts",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../parsers.ts",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../refresh",{"_index":1171,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../response.interface.ts",{"_index":1172,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../set",{"_index":1101,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../time.ts",{"_index":1099,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../token.service.ts",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/core/database/database.module.ts",{"_index":380,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/app/core/database/database.provider.ts",{"_index":989,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/decorators/api",{"_index":97,"title":{},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/decorators/set",{"_index":993,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/exceptions/http",{"_index":571,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/app/core/heimdall/heimdall.module",{"_index":453,"title":{},"body":{"modules/EncryptionModule.html":{}}}],["src/app/core/heimdall/heimdall.module.ts",{"_index":524,"title":{},"body":{"modules/HeimdallModule.html":{}}}],["src/app/core/heimdall/heimdall.service",{"_index":477,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/app/core/heimdall/heimdall.service.ts",{"_index":526,"title":{},"body":{"injectables/HeimdallService.html":{},"coverage.html":{}}}],["src/app/core/heimdall/heimdall.service.ts:19",{"_index":533,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["src/app/core/heimdall/heimdall.service.ts:32",{"_index":531,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["src/app/core/heimdall/heimdall.service.ts:8",{"_index":534,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["src/app/core/interceptor/timeout",{"_index":823,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/app/core/interfaces/repository.interface",{"_index":228,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/app/core/interfaces/repository.interface.ts",{"_index":616,"title":{},"body":{"interfaces/IRepository.html":{},"coverage.html":{}}}],["src/app/core/interfaces/repository.interface.ts:3",{"_index":619,"title":{},"body":{"interfaces/IRepository.html":{}}}],["src/app/core/interfaces/repository.interface.ts:4",{"_index":621,"title":{},"body":{"interfaces/IRepository.html":{}}}],["src/app/core/interfaces/response.interface",{"_index":421,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["src/app/core/interfaces/response.interface.ts",{"_index":763,"title":{},"body":{"interfaces/ResponseInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/interfaces/service.interface.ts",{"_index":623,"title":{},"body":{"interfaces/IService.html":{},"coverage.html":{}}}],["src/app/core/interfaces/service.interface.ts:3",{"_index":627,"title":{},"body":{"interfaces/IService.html":{}}}],["src/app/core/interfaces/service.interface.ts:4",{"_index":630,"title":{},"body":{"interfaces/IService.html":{}}}],["src/app/core/interfaces/service.interface.ts:5",{"_index":628,"title":{},"body":{"interfaces/IService.html":{}}}],["src/app/core/pipes/validation.module.ts",{"_index":930,"title":{},"body":{"modules/ValidationModule.html":{}}}],["src/app/core/pipes/validation.pipe.ts",{"_index":932,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/app/core/pipes/validation.pipe.ts:12",{"_index":940,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/app/core/pipes/validation.pipe.ts:24",{"_index":936,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/app/core/uptime/uptime.controller.ts",{"_index":915,"title":{},"body":{"controllers/UptimeController.html":{},"coverage.html":{}}}],["src/app/core/uptime/uptime.controller.ts:9",{"_index":917,"title":{},"body":{"controllers/UptimeController.html":{}}}],["src/app/core/uptime/uptime.module.ts",{"_index":924,"title":{},"body":{"modules/UptimeModule.html":{}}}],["src/app/core/utils/formatter.ts",{"_index":1002,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/utils/generators.ts",{"_index":1006,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/utils/model",{"_index":226,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/app/core/utils/model.ts",{"_index":1012,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/utils/parsers.ts",{"_index":1015,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/modules/account/account.controller.ts",{"_index":36,"title":{},"body":{"controllers/AccountController.html":{},"coverage.html":{}}}],["src/app/modules/account/account.controller.ts:118",{"_index":75,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/app/modules/account/account.controller.ts:134",{"_index":57,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/app/modules/account/account.controller.ts:144",{"_index":50,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/app/modules/account/account.controller.ts:45",{"_index":79,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/app/modules/account/account.controller.ts:78",{"_index":66,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/app/modules/account/account.module.ts",{"_index":165,"title":{},"body":{"modules/AccountModule.html":{}}}],["src/app/modules/account/account.module.ts:31",{"_index":174,"title":{},"body":{"modules/AccountModule.html":{}}}],["src/app/modules/account/account.service.ts",{"_index":253,"title":{},"body":{"injectables/AccountService.html":{},"coverage.html":{}}}],["src/app/modules/account/account.service.ts:13",{"_index":257,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/app/modules/account/account.service.ts:21",{"_index":263,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/app/modules/account/account.service.ts:28",{"_index":259,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/app/modules/account/account.service.ts:44",{"_index":261,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/app/modules/account/account.service.ts:48",{"_index":260,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/app/modules/encryption/encryption.controller.ts",{"_index":408,"title":{},"body":{"controllers/EncryptionController.html":{},"coverage.html":{}}}],["src/app/modules/encryption/encryption.controller.ts:27",{"_index":420,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["src/app/modules/encryption/encryption.controller.ts:55",{"_index":416,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["src/app/modules/encryption/encryption.module.ts",{"_index":449,"title":{},"body":{"modules/EncryptionModule.html":{}}}],["src/app/modules/encryption/encryption.service.ts",{"_index":454,"title":{},"body":{"injectables/EncryptionService.html":{},"coverage.html":{}}}],["src/app/modules/encryption/encryption.service.ts:101",{"_index":467,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/app/modules/encryption/encryption.service.ts:11",{"_index":461,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/app/modules/encryption/encryption.service.ts:15",{"_index":469,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/app/modules/encryption/encryption.service.ts:22",{"_index":465,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/app/modules/encryption/encryption.service.ts:61",{"_index":463,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/app/modules/test/test.module.ts",{"_index":820,"title":{},"body":{"modules/TestModule.html":{}}}],["src/app/modules/token/token.module.ts",{"_index":845,"title":{},"body":{"modules/TokenModule.html":{}}}],["src/app/modules/token/token.service.ts",{"_index":855,"title":{},"body":{"injectables/TokensService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/modules/token/token.service.ts:108",{"_index":877,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/app/modules/token/token.service.ts:120",{"_index":875,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/app/modules/token/token.service.ts:22",{"_index":881,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/app/modules/token/token.service.ts:23",{"_index":865,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/app/modules/token/token.service.ts:36",{"_index":871,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/app/modules/token/token.service.ts:45",{"_index":873,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/app/modules/token/token.service.ts:61",{"_index":879,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/app/modules/token/token.service.ts:84",{"_index":867,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/app/modules/token/token.service.ts:94",{"_index":869,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/app/shared/converter/bytes.ts",{"_index":1020,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/shared/converter/time.ts",{"_index":1023,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/shared/dto/account/account",{"_index":243,"title":{},"body":{"classes/AccountResponseDto.html":{},"classes/AccountTokenResponseDto.html":{},"coverage.html":{}}}],["src/app/shared/dto/account/authentication",{"_index":296,"title":{},"body":{"classes/AuthenticationResponseDto.html":{},"coverage.html":{}}}],["src/app/shared/dto/account/create",{"_index":300,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/dto/account/login.dto.ts",{"_index":706,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/app/shared/dto/account/login.dto.ts:18",{"_index":709,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/app/shared/dto/account/login.dto.ts:32",{"_index":711,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/app/shared/dto/account/refresh",{"_index":724,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/app/shared/dto/encryption",{"_index":422,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["src/app/shared/dto/encryption/create",{"_index":366,"title":{},"body":{"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"coverage.html":{}}}],["src/app/shared/dto/encryption/response",{"_index":424,"title":{},"body":{"controllers/EncryptionController.html":{},"classes/ResponseEncryptionDto.html":{},"coverage.html":{}}}],["src/app/shared/guards/jwt.guard.ts",{"_index":632,"title":{},"body":{"injectables/JWTGuard.html":{},"coverage.html":{}}}],["src/app/shared/guards/jwt.guard.ts:27",{"_index":644,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["src/app/shared/interfaces/account/account",{"_index":276,"title":{},"body":{"interfaces/AccountToken.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/account/account.interface.ts",{"_index":26,"title":{},"body":{"interfaces/Account.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/encryption",{"_index":476,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/app/shared/interfaces/encryption/decrypted",{"_index":386,"title":{},"body":{"interfaces/DecryptedResponse.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/encryption/encrypted",{"_index":404,"title":{},"body":{"interfaces/EncryptedResponse.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/encryption/handshake",{"_index":515,"title":{},"body":{"interfaces/HandshakeResponse.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/token/access",{"_index":6,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/token/refresh",{"_index":713,"title":{},"body":{"interfaces/RefreshToken.html":{},"interfaces/RefreshTokenPayload.html":{},"coverage.html":{}}}],["src/app/shared/middleware/logger.middleware",{"_index":188,"title":{},"body":{"modules/AccountModule.html":{}}}],["src/app/shared/middleware/logger.middleware.ts",{"_index":688,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/app/shared/middleware/logger.middleware.ts:14",{"_index":694,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/app/shared/middleware/logger.middleware.ts:8",{"_index":689,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/app/shared/middleware/security.middleware.ts",{"_index":770,"title":{},"body":{"injectables/SecurityMiddleware.html":{},"coverage.html":{}}}],["src/app/shared/middleware/security.middleware.ts:17",{"_index":771,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["src/app/shared/repositories/account",{"_index":181,"title":{},"body":{"modules/AccountModule.html":{}}}],["src/app/shared/repositories/account/account.repository.ts",{"_index":201,"title":{},"body":{"injectables/AccountRepository.html":{},"coverage.html":{}}}],["src/app/shared/repositories/account/account.repository.ts:10",{"_index":208,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/app/shared/repositories/account/account.repository.ts:15",{"_index":217,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/app/shared/repositories/account/account.repository.ts:19",{"_index":215,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/app/shared/repositories/account/account.repository.ts:25",{"_index":213,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/app/shared/repositories/account/account.repository.ts:29",{"_index":211,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/app/shared/repositories/token/refresh",{"_index":740,"title":{},"body":{"injectables/RefreshTokensRepository.html":{},"coverage.html":{}}}],["src/app/shared/schemas/account",{"_index":184,"title":{},"body":{"modules/AccountModule.html":{}}}],["src/app/shared/schemas/account/account.schema.ts",{"_index":1036,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/schemas/token/refresh",{"_index":1037,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/strategies/jwt.strategy.ts",{"_index":666,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/app/shared/strategies/jwt.strategy.ts:11",{"_index":668,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/app/shared/strategies/jwt.strategy.ts:26",{"_index":670,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/app/stitch.module.ts",{"_index":802,"title":{},"body":{"modules/StitchModule.html":{}}}],["src/config/config",{"_index":383,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/LoggerMiddleware.html":{}}}],["src/config/config.ts",{"_index":1039,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1040,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standard",{"_index":963,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":1140,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1143,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1145,"title":{},"body":{"index.html":{}}}],["started",{"_index":956,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["starting",{"_index":983,"title":{},"body":{"changelog.html":{}}}],["statements",{"_index":988,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":808,"title":{},"body":{"modules/StitchModule.html":{},"dependencies.html":{}}}],["status",{"_index":110,"title":{},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ResponseInterface.html":{}}}],["stitch",{"_index":543,"title":{},"body":{"injectables/HeimdallService.html":{},"index.html":{},"properties.html":{}}}],["stitchmodule",{"_index":798,"title":{"modules/StitchModule.html":{}},"body":{"modules/StitchModule.html":{},"modules.html":{},"overview.html":{}}}],["strategy",{"_index":673,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":16,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"injectables/EncryptionService.html":{},"interfaces/HandshakeResponse.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"classes/LoginDto.html":{},"interfaces/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensRepository.html":{},"interfaces/ResponseInterface.html":{},"injectables/TokensService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["string(account.id",{"_index":894,"title":{},"body":{"injectables/TokensService.html":{}}}],["string(token.id",{"_index":898,"title":{},"body":{"injectables/TokensService.html":{}}}],["stringcharacter",{"_index":1011,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":389,"title":{},"body":{"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"interfaces/HandshakeResponse.html":{}}}],["structured",{"_index":395,"title":{},"body":{"interfaces/DecryptedResponse.html":{}}}],["sub",{"_index":15,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RefreshTokenPayload.html":{}}}],["subid",{"_index":908,"title":{},"body":{"injectables/TokensService.html":{}}}],["subject",{"_index":19,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["success",{"_index":72,"title":{},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{},"interfaces/ResponseInterface.html":{},"miscellaneous/typealiases.html":{}}}],["summary",{"_index":413,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["super",{"_index":678,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":1153,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1154,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":611,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["t",{"_index":618,"title":{},"body":{"interfaces/IRepository.html":{},"interfaces/IService.html":{}}}],["table",{"_index":1043,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1042,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":1148,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":1151,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1150,"title":{},"body":{"index.html":{}}}],["testmodule",{"_index":819,"title":{"modules/TestModule.html":{}},"body":{"modules/TestModule.html":{},"modules.html":{}}}],["tests",{"_index":1147,"title":{},"body":{"index.html":{}}}],["text",{"_index":558,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["themes",{"_index":1090,"title":{},"body":{"dependencies.html":{}}}],["this.account",{"_index":266,"title":{},"body":{"injectables/AccountService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokensService.html":{}}}],["this.account.create(account",{"_index":272,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.account.findforemail(email",{"_index":274,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.account.findforid(id",{"_index":273,"title":{},"body":{"injectables/AccountService.html":{},"injectables/JwtStrategy.html":{}}}],["this.account.findforid(subid",{"_index":910,"title":{},"body":{"injectables/TokensService.html":{}}}],["this.accountmodel",{"_index":239,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["this.accountmodel.findbyid(id",{"_index":233,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["this.accountmodel.findone(modelguard",{"_index":230,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["this.accountservice.createuserfromrequest(body",{"_index":118,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.findforemail(email",{"_index":129,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.validatecredentials(account",{"_index":131,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.buildresponsepayload(account",{"_index":145,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.buildresponsepayload(user",{"_index":122,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.decoderefreshtoken(encoded",{"_index":899,"title":{},"body":{"injectables/TokensService.html":{}}}],["this.encryptionservice.decrypt(authheader",{"_index":442,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["this.encryptionservice.encrypt(authheader",{"_index":438,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["this.expiration",{"_index":106,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.findforemail(account.email",{"_index":270,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.generateaccesstoken(account",{"_index":905,"title":{},"body":{"injectables/TokensService.html":{}}}],["this.generatetoken(account",{"_index":136,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.getstoredtokenfromrefreshtokenpayload(payload",{"_index":900,"title":{},"body":{"injectables/TokensService.html":{}}}],["this.getuserfromrefreshtokenpayload(payload",{"_index":903,"title":{},"body":{"injectables/TokensService.html":{}}}],["this.haimdallservice.decrypt(encryptedresponse.data.encrypted",{"_index":497,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.haimdallservice.encrypt(data",{"_index":489,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.haimdallservice.generate",{"_index":480,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.httpservice.post",{"_index":491,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.jwt",{"_index":892,"title":{},"body":{"injectables/TokensService.html":{}}}],["this.jwt.signasync",{"_index":895,"title":{},"body":{"injectables/TokensService.html":{}}}],["this.jwt.verifyasync(token",{"_index":906,"title":{},"body":{"injectables/TokensService.html":{}}}],["this.performhandshake(token",{"_index":484,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.reflector.get('request",{"_index":837,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["this.refreshtokenmodel",{"_index":756,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["this.refreshtokenmodel.findone",{"_index":754,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["this.resolverefreshtoken(refresh",{"_index":904,"title":{},"body":{"injectables/TokensService.html":{}}}],["this.servergeneratekeys(token",{"_index":507,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.tokens",{"_index":891,"title":{},"body":{"injectables/TokensService.html":{}}}],["this.tokens.createrefreshtoken(account.id",{"_index":896,"title":{},"body":{"injectables/TokensService.html":{}}}],["this.tokens.findtokenbyid(tokenid",{"_index":913,"title":{},"body":{"injectables/TokensService.html":{}}}],["this.tokensservice.createaccesstokenfromrefreshtoken",{"_index":143,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.tokensservice.generateaccesstoken(account",{"_index":146,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.tokensservice.generateaccesstoken(user",{"_index":119,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.tokensservice.generaterefreshtoken",{"_index":120,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.tovalidate(metatype",{"_index":945,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["through",{"_index":647,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["throw",{"_index":133,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/EncryptionService.html":{},"injectables/JWTGuard.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/TokensService.html":{},"injectables/ValidationPipe.html":{}}}],["throws",{"_index":660,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["time",{"_index":286,"title":{},"body":{"interfaces/AccountToken.html":{}}}],["timeout",{"_index":836,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["timeout.ts",{"_index":994,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["timeoutinterceptor",{"_index":822,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["token",{"_index":7,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"controllers/AccountController.html":{},"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"injectables/EncryptionService.html":{},"injectables/JWTGuard.html":{},"interfaces/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/RefreshTokensRepository.html":{},"injectables/TokensService.html":{},"coverage.html":{}}}],["token.account",{"_index":757,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["token.dto.ts",{"_index":725,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:17",{"_index":733,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.expires",{"_index":760,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["token.interface.ts",{"_index":277,"title":{},"body":{"interfaces/AccountToken.html":{},"interfaces/RefreshToken.html":{},"coverage.html":{}}}],["token.is_revoked",{"_index":758,"title":{},"body":{"injectables/RefreshTokensRepository.html":{},"injectables/TokensService.html":{}}}],["token.save",{"_index":761,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["token.schema.ts",{"_index":1038,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["token.service",{"_index":853,"title":{},"body":{"modules/TokenModule.html":{}}}],["token/token.module",{"_index":182,"title":{},"body":{"modules/AccountModule.html":{}}}],["token/token.service",{"_index":92,"title":{},"body":{"controllers/AccountController.html":{}}}],["tokenexpirederror",{"_index":883,"title":{},"body":{"injectables/TokensService.html":{}}}],["tokenid",{"_index":911,"title":{},"body":{"injectables/TokensService.html":{}}}],["tokenmodule",{"_index":160,"title":{"modules/TokenModule.html":{}},"body":{"modules/AccountModule.html":{},"modules/TokenModule.html":{},"modules.html":{},"overview.html":{}}}],["tokens",{"_index":283,"title":{},"body":{"interfaces/AccountToken.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{}}}],["tokens.repository.ts",{"_index":741,"title":{},"body":{"injectables/RefreshTokensRepository.html":{},"coverage.html":{}}}],["tokens.repository.ts:13",{"_index":751,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["tokens.repository.ts:18",{"_index":748,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["tokens.repository.ts:7",{"_index":745,"title":{},"body":{"injectables/RefreshTokensRepository.html":{}}}],["tokensservice",{"_index":91,"title":{"injectables/TokensService.html":{}},"body":{"controllers/AccountController.html":{},"modules/TokenModule.html":{},"injectables/TokensService.html":{},"coverage.html":{},"overview.html":{}}}],["tostring",{"_index":784,"title":{},"body":{"injectables/SecurityMiddleware.html":{}}}],["tovalidate",{"_index":933,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":935,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform",{"_index":934,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":938,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":944,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["true",{"_index":71,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/DecryptedResponse.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":483,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/TokensService.html":{}}}],["ttl",{"_index":151,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"injectables/RefreshTokensRepository.html":{}}}],["type",{"_index":17,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountRepository.html":{},"classes/AccountResponseDto.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"classes/AccountTokenResponseDto.html":{},"classes/AuthenticationResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"interfaces/DecryptedResponse.html":{},"interfaces/EncryptedResponse.html":{},"controllers/EncryptionController.html":{},"injectables/EncryptionService.html":{},"interfaces/HandshakeResponse.html":{},"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IRepository.html":{},"interfaces/IService.html":{},"injectables/JWTGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoginDto.html":{},"interfaces/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/RefreshTokensRepository.html":{},"classes/ResponseEncryptionDto.html":{},"interfaces/ResponseInterface.html":{},"injectables/SecurityMiddleware.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TokensService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1168,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":559,"title":{},"body":{"injectables/HeimdallService.html":{},"classes/HttpExceptionFilter.html":{}}}],["typeorm",{"_index":1092,"title":{},"body":{"dependencies.html":{}}}],["types",{"_index":952,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types.find((type",{"_index":954,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types/multer",{"_index":1056,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":12,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"interfaces/AccountToken.html":{},"interfaces/RefreshToken.html":{},"interfaces/RefreshTokenPayload.html":{}}}],["unauthorized",{"_index":127,"title":{},"body":{"controllers/AccountController.html":{},"injectables/JWTGuard.html":{}}}],["unauthorizedexception",{"_index":83,"title":{},"body":{"controllers/AccountController.html":{},"injectables/JWTGuard.html":{},"injectables/TokensService.html":{}}}],["unauthorizedexception('refresh",{"_index":901,"title":{},"body":{"injectables/TokensService.html":{}}}],["unauthorizedexception('the",{"_index":135,"title":{},"body":{"controllers/AccountController.html":{}}}],["unauthorizedexception(message",{"_index":664,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["uncryptedpass",{"_index":234,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["undefined",{"_index":63,"title":{},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{},"injectables/ValidationPipe.html":{}}}],["undefined})@post",{"_index":78,"title":{},"body":{"controllers/AccountController.html":{}}}],["undefined})@post('/decrypt",{"_index":415,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["undefined})@post('/encrypt",{"_index":419,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["undefined})@post('/login",{"_index":65,"title":{},"body":{"controllers/AccountController.html":{}}}],["undefined})@post('/refresh",{"_index":74,"title":{},"body":{"controllers/AccountController.html":{}}}],["unique",{"_index":513,"title":{},"body":{"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":1146,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":58,"title":{},"body":{"controllers/AccountController.html":{},"injectables/HeimdallService.html":{},"injectables/ValidationPipe.html":{}}}],["unknownerror",{"_index":595,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["unprocessable",{"_index":608,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["unprocessableentityexception",{"_index":218,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/EncryptionService.html":{}}}],["unprocessableentityexception('invalid",{"_index":232,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["unprocessableentityexception('signature",{"_index":500,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["update",{"_index":624,"title":{},"body":{"interfaces/IService.html":{}}}],["update(entity",{"_index":629,"title":{},"body":{"interfaces/IService.html":{}}}],["uppercase",{"_index":339,"title":{},"body":{"classes/CreateAccountDto.html":{},"miscellaneous/variables.html":{}}}],["uptime",{"_index":918,"title":{},"body":{"controllers/UptimeController.html":{}}}],["uptime.controller",{"_index":925,"title":{},"body":{"modules/UptimeModule.html":{}}}],["uptimecontroller",{"_index":914,"title":{"controllers/UptimeController.html":{}},"body":{"controllers/UptimeController.html":{},"modules/UptimeModule.html":{},"coverage.html":{}}}],["uptimemodule",{"_index":801,"title":{"modules/UptimeModule.html":{}},"body":{"modules/StitchModule.html":{},"modules/UptimeModule.html":{},"modules.html":{},"overview.html":{}}}],["use",{"_index":11,"title":{},"body":{"interfaces/AccessTokenPayload.html":{},"interfaces/Account.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"interfaces/AccountToken.html":{},"injectables/LoggerMiddleware.html":{},"interfaces/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/SecurityMiddleware.html":{}}}],["use(req",{"_index":690,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/SecurityMiddleware.html":{}}}],["usefactory",{"_index":1198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":116,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"interfaces/AccountToken.html":{},"classes/CreateAccountDto.html":{},"injectables/HeimdallService.html":{},"injectables/JWTGuard.html":{},"classes/LoginDto.html":{}}}],["user@domain.com",{"_index":247,"title":{},"body":{"classes/AccountResponseDto.html":{},"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{}}}],["user@domain.com'})@isdefined",{"_index":307,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["userids",{"_index":542,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["using",{"_index":723,"title":{},"body":{"interfaces/RefreshToken.html":{}}}],["valid",{"_index":130,"title":{},"body":{"controllers/AccountController.html":{},"injectables/EncryptionService.html":{},"injectables/JWTGuard.html":{},"classes/RefreshTokenDto.html":{}}}],["validate",{"_index":667,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["validate(object",{"_index":948,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(payload",{"_index":669,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatecredentials",{"_index":255,"title":{},"body":{"injectables/AccountService.html":{}}}],["validatecredentials(account",{"_index":262,"title":{},"body":{"injectables/AccountService.html":{}}}],["validated",{"_index":661,"title":{},"body":{"injectables/JWTGuard.html":{}}}],["validation",{"_index":302,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{}}}],["validation.pipe",{"_index":931,"title":{},"body":{"modules/ValidationModule.html":{}}}],["validationmessages",{"_index":73,"title":{},"body":{"controllers/AccountController.html":{},"controllers/EncryptionController.html":{}}}],["validationmodule",{"_index":926,"title":{"modules/ValidationModule.html":{}},"body":{"modules/ValidationModule.html":{},"modules.html":{},"overview.html":{}}}],["validationpipe",{"_index":929,"title":{"injectables/ValidationPipe.html":{}},"body":{"modules/ValidationModule.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"overview.html":{}}}],["validator",{"_index":328,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateDecryptionDto.html":{},"classes/CreateEncryptionDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["value",{"_index":941,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":990,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1174,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verificationkeys",{"_index":568,"title":{},"body":{"injectables/HeimdallService.html":{}}}],["verify",{"_index":281,"title":{},"body":{"interfaces/AccountToken.html":{},"classes/RefreshTokenDto.html":{}}}],["version",{"_index":964,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["void",{"_index":176,"title":{},"body":{"modules/AccountModule.html":{},"injectables/LoggerMiddleware.html":{},"injectables/SecurityMiddleware.html":{}}}],["watch",{"_index":1141,"title":{},"body":{"index.html":{}}}],["wen",{"_index":432,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["whether",{"_index":399,"title":{},"body":{"interfaces/DecryptedResponse.html":{}}}],["without",{"_index":731,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["wrong",{"_index":433,"title":{},"body":{"controllers/EncryptionController.html":{}}}],["x",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yes",{"_index":53,"title":{},"body":{"controllers/AccountController.html":{}}}],["z",{"_index":336,"title":{},"body":{"classes/CreateAccountDto.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":162,"title":{},"body":{"modules/AccountModule.html":{},"modules/EncryptionModule.html":{},"modules/HeimdallModule.html":{},"modules/StitchModule.html":{},"modules/TokenModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessTokenPayload.html":{"url":"interfaces/AccessTokenPayload.html","title":"interface - AccessTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccessTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/token/access-token-payload.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                AccessToken token interface for use in typescript\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Subject to return the account based on the subject\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AccessTokenPayload {\n  /**\n   * Subject to return the account based on the subject\n   */\n  sub: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Account.html":{"url":"interfaces/Account.html","title":"interface - Account","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Account\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/account/account.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Account interface for use in typescript\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Email to access the platform\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Password to access the platform\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Account {\n  id?: string;\n  /**\n   * Password to access the platform\n   */\n  password: string;\n  /**\n   * Email to access the platform\n   */\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AccountController.html":{"url":"controllers/AccountController.html","title":"controller - AccountController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AccountController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/modules/account/account.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                account\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                buildResponsePayload\n                            \n                            \n                                    Private\n                                    Async\n                                generateToken\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                refresh\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        buildResponsePayload\n                        \n                    \n                \n            \n            \n                \n                    \n                    buildResponsePayload(account: Account, accessToken: string, refreshToken?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/account/account.controller.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    account\n                                    \n                                                Account\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(account: Account)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/account/account.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    account\n                                    \n                                                Account\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(body: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiEndpoint({success: undefined, error: undefined})@Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/app/modules/account/account.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(body: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiEndpoint({auth: true, success: undefined, validationMessages: undefined, error: undefined})@Post('/refresh')\n                \n            \n\n            \n                \n                    Defined in src/app/modules/account/account.controller.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(body: CreateAccountDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiEndpoint({success: undefined, validationMessages: undefined})@Post('/')\n                \n            \n\n            \n                \n                    Defined in src/app/modules/account/account.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Request,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AccountService } from './account.service';\nimport {\n  AuthenticationResponseDto,\n  CreateAccountDto,\n  RefreshTokenDto,\n} from '../../shared/dto/account/';\nimport { ApiTags } from '@nestjs/swagger';\nimport { TokensService } from '../token/token.service';\nimport { Account } from '../../shared/interfaces/account';\nimport { LoginDto } from '../../shared/dto/account/';\nimport { ResponseInterface } from '../../core/interfaces/response.interface';\nimport { ApiEndpoint } from 'src/app/core/decorators/api-endpoint';\n\n@ApiTags('account')\n@Controller('account')\nexport class AccountController {\n  private readonly expiration: number;\n\n  public constructor(\n    private accountService: AccountService,\n    private tokensService: TokensService,\n  ) {\n    this.expiration = 60 * 60 * 24 * 30;\n  }\n\n  @ApiEndpoint({\n    success: {\n      status: 201,\n      dto: AuthenticationResponseDto,\n    },\n    validationMessages: [\n      'Invalid token id',\n      'Invalid account id',\n      'Email already in use',\n    ],\n  })\n  @Post('/')\n  public async register(\n    @Body() body: CreateAccountDto,\n  ): Promise> {\n    const user = await this.accountService.createUserFromRequest(body);\n    const token = await this.tokensService.generateAccessToken(user);\n    const refresh = await this.tokensService.generateRefreshToken(\n      user,\n      this.expiration,\n    );\n\n    const payload = await this.buildResponsePayload(user, token, refresh);\n    return {\n      status: 'success',\n      data: payload,\n    };\n  }\n\n  @ApiEndpoint({\n    success: {\n      status: 201,\n      dto: AuthenticationResponseDto,\n    },\n    error: {\n      status: 401,\n      message: {\n        example: 'The login is invalid',\n      },\n      error: {\n        example: 'Unauthorized',\n      },\n    },\n  })\n  @Post('/login')\n  public async login(\n    @Body() body: LoginDto,\n  ): Promise> {\n    const { email, password } = body;\n\n    const account = await this.accountService.findForEmail(email);\n    const valid = account\n      ? await this.accountService.validateCredentials(account, password)\n      : false;\n\n    if (!valid) {\n      throw new UnauthorizedException('The login is invalid');\n    }\n\n    const payload = await this.generateToken(account);\n\n    return {\n      status: 'success',\n      data: payload,\n    };\n  }\n\n  @ApiEndpoint({\n    auth: true,\n    success: {\n      status: 201,\n      dto: AuthenticationResponseDto,\n    },\n    validationMessages: ['The refresh token is required'],\n    error: {\n      status: 401,\n      message: {\n        examples: ['Refresh token expired', 'Refresh token malformed'],\n      },\n      error: {\n        example: 'Unauthorized',\n      },\n    },\n  })\n  @Post('/refresh')\n  public async refresh(\n    @Body() body: RefreshTokenDto,\n  ): Promise> {\n    const { account, token } =\n      await this.tokensService.createAccessTokenFromRefreshToken(\n        body.refresh_token,\n      );\n\n    const payload = await this.buildResponsePayload(account, token);\n\n    return {\n      status: 'success',\n      data: payload,\n    };\n  }\n\n  private async generateToken(account: Account) {\n    const token = await this.tokensService.generateAccessToken(account);\n    const refresh = await this.tokensService.generateRefreshToken(\n      account,\n      this.expiration,\n    );\n\n    return await this.buildResponsePayload(account, token, refresh);\n  }\n\n  private async buildResponsePayload(\n    account: Account,\n    accessToken: string,\n    refreshToken?: string,\n  ): Promise {\n\n    return {\n      account: {\n        id: account.id,\n        email: account.email,\n      },\n      payload: {\n        type: 'bearer',\n        token: accessToken,\n        ...(refreshToken ? { refresh_token: refreshToken } : {}),\n        ttl: this.expiration,\n      }\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountModule.html":{"url":"modules/AccountModule.html","title":"module - AccountModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountModule\n\n\n\ncluster_AccountModule_imports\n\n\n\ncluster_AccountModule_exports\n\n\n\ncluster_AccountModule_providers\n\n\n\n\nTokenModule\n\nTokenModule\n\n\n\nAccountModule\n\nAccountModule\n\nAccountModule -->\n\nTokenModule->AccountModule\n\n\n\n\n\nAccountRepository \n\nAccountRepository \n\nAccountRepository  -->\n\nAccountModule->AccountRepository \n\n\n\n\n\nAccountService \n\nAccountService \n\nAccountService  -->\n\nAccountModule->AccountService \n\n\n\n\n\nAccountRepository\n\nAccountRepository\n\nAccountModule -->\n\nAccountRepository->AccountModule\n\n\n\n\n\nAccountService\n\nAccountService\n\nAccountModule -->\n\nAccountService->AccountModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/account/account.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            A module for managing user accounts.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountRepository\n                        \n                        \n                            AccountService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AccountController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TokenModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountRepository\n                        \n                        \n                            AccountService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/account/account.module.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  RequestMethod,\n  forwardRef,\n} from '@nestjs/common';\nimport { AccountService } from './account.service';\nimport { AccountController } from './account.controller';\nimport { AccountRepository } from 'src/app/shared/repositories/account';\nimport { TokenModule } from '../token/token.module';\nimport { AccountSchema } from 'src/app/shared/schemas/account';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { LoggerMiddleware } from 'src/app/shared/middleware/logger.middleware';\n\n/**\n * A module for managing user accounts.\n *\n * @module AccountModule\n */\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: 'Account', schema: AccountSchema }]),\n    TokenModule,\n  ],\n  providers: [AccountService, AccountRepository],\n  controllers: [AccountController],\n  exports: [AccountService, AccountRepository],\n})\nexport class AccountModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LoggerMiddleware)\n      .forRoutes(\n        { path: '/account', method: RequestMethod.POST },\n        { path: '/account/login', method: RequestMethod.POST },\n        { path: '/account/refresh', method: RequestMethod.POST },\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountRepository.html":{"url":"injectables/AccountRepository.html","title":"injectable - AccountRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/repositories/account/account.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findForEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findForId\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(accountModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/repositories/account/account.repository.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        accountModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(account: Account)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/repositories/account/account.repository.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    account\n                                    \n                                                Account\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findForEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findForEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/repositories/account/account.repository.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findForId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findForId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/repositories/account/account.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/repositories/account/account.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnprocessableEntityException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { isValidObjectId, Model } from 'mongoose';\nimport { Account } from '../../interfaces/account';\nimport * as bcrypt from 'bcryptjs';\nimport { modelGuard } from 'src/app/core/utils/model';\nimport { IRepository } from 'src/app/core/interfaces/repository.interface';\n\n@Injectable()\nexport class AccountRepository implements IRepository {\n  constructor(\n    @InjectModel('Account') private readonly accountModel: Model,\n  ) {}\n\n  async findOne(email: string): Promise {\n    return await this.accountModel.findOne(modelGuard({ email }));\n  }\n\n  public async findForId(id: string): Promise {\n    if (!isValidObjectId(id))\n      throw new UnprocessableEntityException('Invalid account id');\n    return await this.accountModel.findById(id);\n  }\n\n  public async findForEmail(email: string): Promise {\n    return await this.accountModel.findOne(modelGuard({ email }));\n  }\n\n  public async create(account: Account): Promise {\n    const { email, password: uncryptedPass } = account;\n    const salt = await bcrypt.genSalt();\n    const password = await bcrypt.hash(uncryptedPass, salt);\n\n    const createdAccount = new this.accountModel(\n      modelGuard({\n        email,\n        password\n      }),\n    );\n\n    return await createdAccount.save();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AccountResponseDto.html":{"url":"classes/AccountResponseDto.html","title":"class - AccountResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccountResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/dto/account/account-response.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Pick\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@domain.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/account/account-response.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'abc123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/account/account-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Account } from '../../interfaces/account/account.interface';\n\nexport class AccountResponseDto\n  implements Pick\n{\n  @ApiProperty({ example: 'abc123' })\n  id?: string;\n\n  @ApiProperty({ example: 'user@domain.com' })\n  email: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountService.html":{"url":"injectables/AccountService.html","title":"injectable - AccountService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/modules/account/account.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                account\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUserFromRequest\n                            \n                            \n                                    Public\n                                    Async\n                                findForEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findForId\n                            \n                            \n                                    Public\n                                    Async\n                                validateCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(account: AccountRepository)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/account/account.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        account\n                                                  \n                                                        \n                                                                        AccountRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUserFromRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserFromRequest(request: CreateAccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/account/account.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                CreateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findForEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findForEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/account/account.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findForId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findForId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/account/account.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validateCredentials\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateCredentials(account: Account, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/account/account.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    account\n                                    \n                                                Account\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        account\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountRepository\n\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/account/account.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n} from '@nestjs/common';\nimport { CreateAccountDto } from '../../shared/dto/account/';\nimport { Account } from '../../shared/interfaces/account';\nimport * as bcrypt from 'bcryptjs';\nimport { AccountRepository } from '../../shared/repositories/account';\n\n\n@Injectable()\nexport class AccountService {\n  private readonly account: AccountRepository;\n\n  public constructor(\n    account: AccountRepository,\n  ) {\n    this.account = account;\n  }\n\n  public async validateCredentials(\n    account: Account,\n    password: string,\n  ): Promise {\n    return bcrypt.compare(password, account.password);\n  }\n\n  public async createUserFromRequest(\n    request: CreateAccountDto,\n  ): Promise {\n    const account: Account = request;\n\n    const existingFromEmail = await this.findForEmail(account.email);\n\n    if (existingFromEmail) {\n      throw new BadRequestException('Email already in use');\n    }\n\n    const createdAccount = await this.account.create(account);\n\n    return createdAccount;\n  }\n\n  public async findForId(id: string): Promise {\n    return this.account.findForId(id);\n  }\n\n  public async findForEmail(email: string): Promise {\n    const account = await this.account.findForEmail(email);\n    return account;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AccountToken.html":{"url":"interfaces/AccountToken.html","title":"interface - AccountToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/account/account-token.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication response payload interface for use in typescript\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            refresh_token\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                                \n                                        \n                                            ttl\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refresh_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    To access the api and verify if the user is authenticated\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    To request new tokens instead need password and email from account\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ttl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ttl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The time to live the token\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AccountToken {\n  /**\n   * Token type\n   */\n  type: string;\n  /**\n   * To request new tokens instead need password and email from account\n   */\n  token: string;\n  /**\n   * To access the api and verify if the user is authenticated\n   */\n  refresh_token?: string;\n  /**\n   * The time to live the token\n   */\n  ttl: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AccountTokenResponseDto.html":{"url":"classes/AccountTokenResponseDto.html","title":"class - AccountTokenResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccountTokenResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/dto/account/account-token-response.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AccountToken\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                refresh_token\n                            \n                            \n                                token\n                            \n                            \n                                ttl\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ey...', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/account/account-token-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQ...'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/account/account-token-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ttl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 2592000})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/account/account-token-response.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'bearer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/account/account-token-response.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { AccountToken } from '../../interfaces/account';\n\nexport class AccountTokenResponseDto implements AccountToken {\n  @ApiProperty({ example: 'bearer' })\n  type: string;\n\n  @ApiProperty({ example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQ...' })\n  token: string;\n\n  @ApiProperty({\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ey...',\n    required: false,\n  })\n  refresh_token?: string;\n\n  @ApiProperty({ example: 2592000 })\n  ttl: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationResponseDto.html":{"url":"classes/AuthenticationResponseDto.html","title":"class - AuthenticationResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/dto/account/authentication-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                account\n                            \n                            \n                                payload\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        account\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountResponseDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/account/authentication-response.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        payload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountTokenResponseDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/account/authentication-response.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { AccountResponseDto } from './account-response.dto';\nimport { AccountTokenResponseDto } from './account-token-response.dto';\n\nexport class AuthenticationResponseDto {\n  @ApiProperty()\n  account: AccountResponseDto;\n\n  @ApiProperty()\n  payload: AccountTokenResponseDto;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAccountDto.html":{"url":"classes/CreateAccountDto.html","title":"class - CreateAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/dto/account/create-account.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Account validation object for creation\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@ApiProperty({description: 'Email to register user in our application', example: 'user@domain.com'})@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/account/create-account.dto.ts:47\n                        \n                    \n\n            \n                \n                    Email to access the platform\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(MIN_PASSWORD_LENGTH)@MaxLength(MAX_PASSWORD_LENGTH)@IsNotEmpty()@ApiProperty({description: 'Password to register the user in our application', minimum: 8, maximum: 128, example: '123Mudar!'})@IsDefined()@Matches(checkUpperCaseString, {message: checkUpperCaseStringErrMsg})@Matches(checkLowerCaseString, {message: checkLowerCaseStringErrMsg})@Matches(checkNumberString, {message: checkNumberStringErrMsg})@Matches(checkSpecialString, {message: checkSpecialStringErrMsg})@Matches(checkEmptySpaceString, {message: checkEmptySpaceStringErrMsg})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/account/create-account.dto.ts:68\n                        \n                    \n\n            \n                \n                    Password to access the platform\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsString,\n  IsEmail,\n  MinLength,\n  IsNotEmpty,\n  MaxLength,\n  Matches,\n  IsDefined,\n} from 'class-validator';\nimport { config } from '../../../../config/config';\n\nconst MIN_PASSWORD_LENGTH = config.minPasswordLength;\nconst MAX_PASSWORD_LENGTH = config.maxPasswordLength;\n\nconst checkUpperCaseString = /(?=.*?[A-Z])/;\nconst checkUpperCaseStringErrMsg =\n  'Your password must include uppercase character';\n\nconst checkLowerCaseString = /(?=.*?[a-z])/;\nconst checkLowerCaseStringErrMsg =\n  'Your password must include lowercase character';\n\nconst checkNumberString = /(?=.*?[0-9])/;\nconst checkNumberStringErrMsg = 'Your password must include numbers';\n\nconst checkSpecialString = /(?=.*?[!“#$%&‘()*+,-./:;?@[\\]^_`{|}~])/;\nconst checkSpecialStringErrMsg = 'Your password must include special character';\n\nconst checkEmptySpaceString = /^((?![\\s]).)*$/;\nconst checkEmptySpaceStringErrMsg = 'Your password cannot have empty spaces';\n\n/**\n * Account validation object for creation\n */\nexport class CreateAccountDto {\n  /**\n   * Email to access the platform\n   */\n  @IsEmail()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Email to register user in our application',\n    example: 'user@domain.com',\n  })\n  @IsDefined()\n  email: string;\n\n  /**\n   * Password to access the platform\n   */\n  @IsString()\n  @MinLength(MIN_PASSWORD_LENGTH)\n  @MaxLength(MAX_PASSWORD_LENGTH)\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Password to register the user in our application',\n    minimum: 8,\n    maximum: 128,\n    example: '123Mudar!',\n  })\n  @IsDefined()\n  @Matches(checkUpperCaseString, { message: checkUpperCaseStringErrMsg })\n  @Matches(checkLowerCaseString, { message: checkLowerCaseStringErrMsg })\n  @Matches(checkNumberString, { message: checkNumberStringErrMsg })\n  @Matches(checkSpecialString, { message: checkSpecialStringErrMsg })\n  @Matches(checkEmptySpaceString, { message: checkEmptySpaceStringErrMsg })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDecryptionDto.html":{"url":"classes/CreateDecryptionDto.html","title":"class - CreateDecryptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDecryptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/dto/encryption/create-decryption.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                encryption\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/encryption/create-decryption.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encryption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/encryption/create-decryption.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsString,\n  IsNotEmpty,\n} from 'class-validator';\n\n\nexport class CreateDecryptionDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty()\n  encryption: string;\n  \n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  data: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEncryptionDto.html":{"url":"classes/CreateEncryptionDto.html","title":"class - CreateEncryptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEncryptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/dto/encryption/create-encryption.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                encryption\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsObject()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/encryption/create-encryption.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encryption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/encryption/create-encryption.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsString,\n  IsNotEmpty,\n  IsObject,\n} from 'class-validator';\n\n\nexport class CreateEncryptionDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty()\n  encryption: string;\n  \n  @IsNotEmpty()\n  @IsObject()\n  @ApiProperty()\n  data: object;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/core/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { databaseProviders } from './database.provider';\nimport { config } from 'src/config/config';\n\n@Module({\n  imports: [MongooseModule.forRoot(config.mongoUrl)],\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DecryptedResponse.html":{"url":"interfaces/DecryptedResponse.html","title":"interface - DecryptedResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DecryptedResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/encryption/decrypted-response.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response structure after decrypting some data.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            signature\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     object | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     object | string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Contains the decrypted content.\nCan either be an object (for structured data) or a plain string.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        signature\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        signature:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates whether the decryption was signed or not.\nTrue if signed; otherwise, false.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface DecryptedResponse {\n  /**\n   * Indicates whether the decryption was signed or not.\n   * True if signed; otherwise, false.\n   */\n  signature: boolean;\n\n  /**\n   * Contains the decrypted content.\n   * Can either be an object (for structured data) or a plain string.\n   */\n  data: object | string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EncryptedResponse.html":{"url":"interfaces/EncryptedResponse.html","title":"interface - EncryptedResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EncryptedResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/encryption/encrypted-response.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response structure containing encrypted data.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            encrypted\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        encrypted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        encrypted:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Contains the encrypted content as a string.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface EncryptedResponse {\n  /**\n   * Contains the encrypted content as a string.\n   */\n  encrypted: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EncryptionController.html":{"url":"controllers/EncryptionController.html","title":"controller - EncryptionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EncryptionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/modules/encryption/encryption.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                encryption\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decrypt\n                            \n                            \n                                    Async\n                                encrypt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        decrypt\n                        \n                    \n                \n            \n            \n                \n                    \n                    decrypt(req, encryptionDto: CreateDecryptionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiEndpoint({auth: true, summary: 'Decrypt new date', validationMessages: undefined, success: undefined})@Post('/decrypt')\n                \n            \n\n            \n                \n                    Defined in src/app/modules/encryption/encryption.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    encryptionDto\n                                    \n                                                CreateDecryptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        encrypt\n                        \n                    \n                \n            \n            \n                \n                    \n                    encrypt(req, encryptionDto: CreateEncryptionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiEndpoint({auth: true, summary: 'Encrypt new date', validationMessages: undefined, success: undefined})@Post('/encrypt')\n                \n            \n\n            \n                \n                    Defined in src/app/modules/encryption/encryption.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    encryptionDto\n                                    \n                                                CreateEncryptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Request } from '@nestjs/common';\nimport { ApiEndpoint } from 'src/app/core/decorators/api-endpoint';\nimport { ResponseInterface } from 'src/app/core/interfaces/response.interface';\nimport { CreateDecryptionDto, CreateEncryptionDto } from 'src/app/shared/dto/encryption';\nimport { ResponseEncryptionDto } from 'src/app/shared/dto/encryption/response-encryption.dto';\nimport { EncryptionService } from './encryption.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('encryption')\n@Controller('encryption')\nexport class EncryptionController {\n\n  constructor(private readonly encryptionService: EncryptionService){}\n\n  @ApiEndpoint({\n    auth: true,\n    summary: 'Encrypt new date',\n    validationMessages: [\n      'something wen wrong',\n    ],\n    success: {\n      status: 201,\n      dto: ResponseEncryptionDto,\n    },\n  })\n  @Post('/encrypt')\n  async encrypt(\n    @Request() req,\n    @Body() encryptionDto: CreateEncryptionDto,\n  ): Promise {\n    const authHeader = req.headers.authorization;\n\n    const encryptedDataProcessed = await this.encryptionService.encrypt(authHeader, encryptionDto.data)\n\n    return {\n      status: 'success',\n      data: {\n        encrypted: encryptedDataProcessed.data\n      },\n    };\n  }\n\n  @ApiEndpoint({\n    auth: true,\n    summary: 'Decrypt new date',\n    validationMessages: [\n      'something wen wrong',\n    ],\n    success: {\n      status: 201,\n      dto: ResponseEncryptionDto,\n    },\n  })\n  @Post('/decrypt')\n  async decrypt(\n    @Request() req,\n    @Body() encryptionDto: CreateDecryptionDto,\n  ): Promise {\n    const authHeader = req.headers.authorization;\n\n    const encryptedDataProcessed = await this.encryptionService.decrypt(authHeader, encryptionDto.data)\n\n    return {\n      status: 'success',\n      data: {\n        signature: encryptedDataProcessed.signature,\n        data: encryptedDataProcessed.data\n      },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EncryptionModule.html":{"url":"modules/EncryptionModule.html","title":"module - EncryptionModule","body":"\n                   \n\n\n\n\n    Modules\n    EncryptionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EncryptionModule\n\n\n\ncluster_EncryptionModule_imports\n\n\n\ncluster_EncryptionModule_providers\n\n\n\n\nHeimdallModule\n\nHeimdallModule\n\n\n\nEncryptionModule\n\nEncryptionModule\n\nEncryptionModule -->\n\nHeimdallModule->EncryptionModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nEncryptionModule -->\n\nEncryptionService->EncryptionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/encryption/encryption.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EncryptionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EncryptionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            HeimdallModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EncryptionController } from './encryption.controller';\nimport { EncryptionService } from './encryption.service';\nimport { HttpModule } from '@nestjs/axios';\nimport { HeimdallModule } from 'src/app/core/heimdall/heimdall.module';\n\n@Module({\n  imports: [\n    HttpModule,\n    HeimdallModule\n  ],\n  controllers: [EncryptionController],\n  providers: [EncryptionService]\n})\nexport class EncryptionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/modules/encryption/encryption.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decrypt\n                            \n                            \n                                    Async\n                                encrypt\n                            \n                            \n                                    Private\n                                    Async\n                                performHandshake\n                            \n                            \n                                    Private\n                                    Async\n                                serverGenerateKeys\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, haimdallService: HeimdallService)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/encryption/encryption.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        haimdallService\n                                                  \n                                                        \n                                                                        HeimdallService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        decrypt\n                        \n                    \n                \n            \n            \n                \n                    \n                    decrypt(token: string, data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/encryption/encryption.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        encrypt\n                        \n                    \n                \n            \n            \n                \n                    \n                    encrypt(token: string, data: object)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/encryption/encryption.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        performHandshake\n                        \n                    \n                \n            \n            \n                \n                    \n                    performHandshake(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/encryption/encryption.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        serverGenerateKeys\n                        \n                    \n                \n            \n            \n                \n                    \n                    serverGenerateKeys(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/encryption/encryption.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable, UnprocessableEntityException } from '@nestjs/common';\nimport { AxiosResponse } from '@nestjs/terminus/dist/health-indicator/http/axios.interfaces';\nimport { lastValueFrom } from 'rxjs';\nimport { config } from '../../../config/config';\nimport { DecryptedResponse, EncryptedResponse, HandshakeResponse } from 'src/app/shared/interfaces/encryption';\nimport { HeimdallService } from 'src/app/core/heimdall/heimdall.service';\n\n\n@Injectable()\nexport class EncryptionService {\n\n  constructor(private readonly httpService: HttpService, private readonly haimdallService: HeimdallService) { }\n\n  private async serverGenerateKeys(token: string){\n    const { privateKey, publicKey } = await this.haimdallService.generate()\n\n    process.env[`${token}_api_secret`] = privateKey;\n    process.env[`${token}_api_public`] = publicKey;\n  }\n\n  async encrypt(\n    token: string,\n    data: object\n  ): Promise{\n      try {\n        \n        const handshakeResponse = await this.performHandshake(token);\n\n        const armoredPrivateKey = process.env[`${token}_api_secret`];\n        const armoredPublicKey = handshakeResponse.data.publicKey;\n        \n        const encryptedPayload = await this.haimdallService.encrypt(data, armoredPrivateKey, armoredPublicKey)\n\n        const certificate$ = this.httpService.post(\n          `${config.saltEncrypt}/api/encrypt`,\n          {\n            encrypted: encryptedPayload\n          },\n          {\n            headers: {\n              'Content-Type': 'application/json',\n              'token': token\n            },\n          },\n        );\n        const encryptedResponse = await lastValueFrom>(certificate$);\n        const { decrypted, signatures } = await this.haimdallService.decrypt(encryptedResponse.data.encrypted, armoredPrivateKey, armoredPublicKey)\n        const signature = await signatures[0].verified;\n        if(!signature){\n          throw new UnprocessableEntityException('Signature not valid into data encryption between api and service')\n        }\n        return { data: decrypted, signature: true}\n        \n      } catch (error) {\n        throw error;\n      }\n\n  }\n\n  async decrypt(\n    token: string,\n    data: string\n  ): Promise {\n    try {\n\n      const handshakeResponse = await this.performHandshake(token);\n\n      const armoredPrivateKey = process.env[`${token}_api_secret`];\n      const armoredPublicKey = handshakeResponse.data.publicKey;\n\n      const encryptedPayload = await this.haimdallService.encrypt(data, armoredPrivateKey, armoredPublicKey)\n\n      const certificate$ = this.httpService.post(\n        `${config.saltEncrypt}/api/decrypt`,\n        {\n          encrypted: encryptedPayload\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            'token': token\n          },\n        },\n      );\n      const encryptedResponse = await lastValueFrom>(certificate$);\n      const { decrypted, signatures } = await this.haimdallService.decrypt(encryptedResponse.data.encrypted, armoredPrivateKey, armoredPublicKey)\n      const signature = await signatures[0].verified;\n      if (!signature) {\n        throw new UnprocessableEntityException('Signature not valid into data encryption between api and service')\n      }\n      const parsedDecription = decrypted as string;\n      return { data: JSON.parse(parsedDecription), signature: true }\n\n    } catch (error) {\n      throw error;\n    }\n\n  }\n\n  private async performHandshake(token: string): Promise> {\n    try {\n      await this.serverGenerateKeys(token);\n\n      const handshake$ = this.httpService.post(\n        `${config.saltEncrypt}/api/handshake`,\n        {\n          apiPublicKey: process.env[`${token}_api_public`], // Send the public key of your API\n          token: token, // Send the unique token\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        },\n      );\n\n      const response = await lastValueFrom(handshake$);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HandshakeResponse.html":{"url":"interfaces/HandshakeResponse.html","title":"interface - HandshakeResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HandshakeResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/encryption/handshake-response.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response structure for initiating a cryptographic handshake.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            publicKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        publicKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Contains the public key provided during the handshake process.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface HandshakeResponse {\n  /**\n   * Contains the public key provided during the handshake process.\n   */\n  publicKey: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HeimdallModule.html":{"url":"modules/HeimdallModule.html","title":"module - HeimdallModule","body":"\n                   \n\n\n\n\n    Modules\n    HeimdallModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HeimdallModule\n\n\n\ncluster_HeimdallModule_exports\n\n\n\ncluster_HeimdallModule_providers\n\n\n\n\nHeimdallService \n\nHeimdallService \n\n\n\nHeimdallModule\n\nHeimdallModule\n\nHeimdallService  -->\n\nHeimdallModule->HeimdallService \n\n\n\n\n\nHeimdallService\n\nHeimdallService\n\nHeimdallModule -->\n\nHeimdallService->HeimdallModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/core/heimdall/heimdall.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HeimdallService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HeimdallService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HeimdallService } from './heimdall.service';\n\n@Module({\n  providers: [HeimdallService],\n  exports: [HeimdallService]\n})\nexport class HeimdallModule { }\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HeimdallService.html":{"url":"injectables/HeimdallService.html","title":"injectable - HeimdallService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HeimdallService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/heimdall/heimdall.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                decrypt\n                            \n                            \n                                    Public\n                                    Async\n                                encrypt\n                            \n                            \n                                    Public\n                                    Async\n                                generate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        decrypt\n                        \n                    \n                \n            \n            \n                \n                    \n                    decrypt(encrypted: string, privateKeyArmored: string, publicKeyArmored: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/heimdall/heimdall.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    encrypted\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    privateKeyArmored\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    publicKeyArmored\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        encrypt\n                        \n                    \n                \n            \n            \n                \n                    \n                    encrypt(data: object | string, privateKeyArmored: string, publicKeyArmored: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/heimdall/heimdall.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            object | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    privateKeyArmored\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    publicKeyArmored\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generate\n                        \n                    \n                \n            \n            \n                \n                    \n                    generate()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/heimdall/heimdall.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as openpgp from 'openpgp';\n\n\n@Injectable()\nexport class HeimdallService {\n\n  public async generate() {\n    const { privateKey, publicKey, revocationCertificate } = await openpgp.generateKey({\n      type: 'ecc', // Type of the key, defaults to ECC\n      curve: 'curve25519', // ECC curve name, defaults to curve25519\n      userIDs: [{ name: 'Stitch API', email: 'api@stitch.com' }], // you can pass multiple user IDs\n      format: 'armored' // output key format, defaults to 'armored' (other options: 'binary' or 'object')\n    });\n\n    return { privateKey, publicKey }\n  }\n\n  public async encrypt(data: object | string, privateKeyArmored: string, publicKeyArmored: string) {\n    const privateKey = await openpgp.readPrivateKey({ armoredKey: privateKeyArmored })\n    const publicKey = await openpgp.readKey({ armoredKey: publicKeyArmored });\n\n    const encrypted = await openpgp.encrypt({\n      message: await openpgp.createMessage({ text: typeof (data) === 'string' ? data : JSON.stringify(data) }), // input as Message object\n      encryptionKeys: publicKey,\n      signingKeys: privateKey\n    });\n\n    return encrypted;\n  }\n\n  public async decrypt(encrypted: string, privateKeyArmored: string, publicKeyArmored: string) {\n    const message = await openpgp.readMessage({\n      armoredMessage: encrypted // parse armored message\n    });\n\n    const privateKey = await openpgp.readPrivateKey({ armoredKey: privateKeyArmored })\n    const publicKey = await openpgp.readKey({ armoredKey: publicKeyArmored });\n\n    const { data: decrypted, signatures } = await openpgp.decrypt({\n      message,\n      verificationKeys: publicKey,\n      decryptionKeys: privateKey\n    });\n\n    return { decrypted, signatures }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/exceptions/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/exceptions/http-exception.filter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  HttpException,\n  ArgumentsHost,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { ResponseInterface } from '../interfaces/response.interface';\n\n@Catch()\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: any, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const errorPayload: ResponseInterface = {\n      status: 'error',\n      message: exception?.response?.message\n        ? typeof exception?.response?.message == 'string'\n          ? exception?.response?.message\n          : exception?.response?.message.join('\\n')\n        : exception.message,\n      errorName: exception?.response?.error ?? 'UnknownError',\n      errorCode: status,\n    };\n\n    if (exception.name == 'CastError') {\n      response.status(400).json({\n        ...errorPayload,\n        message: exception.message,\n        errorName: 'Bad Request',\n        errorCode: 400,\n      });\n    } else if (exception.code === 'ENOENT' || status === 500) {\n      console.log(exception);\n      response.status(422).json({\n        ...errorPayload,\n        errorCode: 422,\n        errorName: 'Unprocessable Entity',\n        message:\n          'We was not able to process your request, go to our swagger to check the params and endpoints.',\n      } as ResponseInterface);\n    } else {\n      response.status(status).json(errorPayload);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRepository.html":{"url":"interfaces/IRepository.html","title":"interface - IRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(entity: T)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/interfaces/repository.interface.ts:3\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/interfaces/repository.interface.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface IRepository {\n  create(entity: T): Promise;\n  findOne(id: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IService.html":{"url":"interfaces/IService.html","title":"interface - IService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createDto: CreateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/interfaces/service.interface.ts:3\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/interfaces/service.interface.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(entity: T)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/interfaces/service.interface.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface IService {\n  create(createDto: CreateDto): Promise;\n  update(entity: T): Promise;\n  findOne(id: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JWTGuard.html":{"url":"injectables/JWTGuard.html","title":"injectable - JWTGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JWTGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/guards/jwt.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                A guard that checks for a valid JWT token in the request header and authorizes access to protected routes.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info: Error, context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/guards/jwt.guard.ts:27\n                \n            \n\n\n            \n                \n                    Handles a request that passes through the guard.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe error, if any, encountered during the request.\n\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe user object retrieved from the JWT token.\n\n\n                                    \n                                \n                                \n                                    info\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nInformation about the JWT token, if any.\n\n\n                                    \n                                \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe context of the request.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nThe user object retrieved from the JWT token, if the token is valid and the user is authorized to access the requested resource.\n\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  ExecutionContext,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * A guard that checks for a valid JWT token in the request header and authorizes access to protected routes.\n *\n * @class JWTGuard\n * @extends AuthGuard('jwt')\n */\n@Injectable()\nexport class JWTGuard extends AuthGuard('jwt') {\n  /**\n   * Handles a request that passes through the guard.\n   *\n   * @method handleRequest\n   * @param {Error} err - The error, if any, encountered during the request.\n   * @param {object} user - The user object retrieved from the JWT token.\n   * @param {Error} info - Information about the JWT token, if any.\n   * @param {ExecutionContext} context - The context of the request.\n   * @returns {object} - The user object retrieved from the JWT token, if the token is valid and the user is authorized to access the requested resource.\n   * @throws {UnauthorizedException} - If the user has not yet validated their account or if the JWT token is invalid or unauthorized.\n   */\n  handleRequest(err, user, info: Error, context: ExecutionContext) {\n    if (err || info || !user) {\n      let message = 'Invalid user';\n\n      if (err) {\n        message = err.message;\n      }\n\n      if (info) {\n        message = info.message;\n      }\n\n      throw new UnauthorizedException(message);\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                account\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(account: AccountService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/strategies/jwt.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        account\n                                                  \n                                                        \n                                                                        AccountService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: AccessTokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/strategies/jwt.strategy.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                AccessTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        account\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/strategies/jwt.strategy.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { AccountService } from '../../modules/account/account.service';\nimport { Account } from '../interfaces/account';\nimport { config } from '../../../config/config';\nimport { AccessTokenPayload } from '../interfaces/token';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  private account: AccountService;\n\n  public constructor(account: AccountService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: config.jwtSecret,\n      signOptions: {\n        expiresIn: config.jwtExpirationTime,\n      },\n    });\n\n    this.account = account;\n  }\n\n  async validate(payload: AccessTokenPayload): Promise {\n    const { sub: id } = payload;\n\n    const account = await this.account.findForId(id);\n\n    if (!account) {\n      return null;\n    }\n\n    return account;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/middleware/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/middleware/logger.middleware.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/middleware/logger.middleware.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { CloudWatchLogs, Credentials } from 'aws-sdk';\nimport { PutLogEventsRequest } from 'aws-sdk/clients/cloudwatchlogs';\nimport { config } from 'src/config/config';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n\n\n  constructor() {\n  }\n\n  use(req: Request, res: Response, next: NextFunction) {\n\n    res.on('finish', () => {\n      if (res.statusCode >= 400) {\n        console.error(`${res.statusCode} ${req.url}\\n`);\n      }\n    });\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/dto/account/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Login validation object for authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@MinLength(5)@IsNotEmpty()@ApiProperty({description: 'Email to authenticate user in our application', example: 'user@domain.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/account/login.dto.ts:18\n                        \n                    \n\n            \n                \n                    Email to access the platform\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(5)@IsNotEmpty()@ApiProperty({description: 'Password to authenticate the user in our application', minimum: 8, maximum: 128, example: '123Mudar!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/account/login.dto.ts:32\n                        \n                    \n\n            \n                \n                    Password to access the platform\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\n/**\n * Login validation object for authentication\n */\nexport class LoginDto {\n  /**\n   * Email to access the platform\n   */\n  @IsEmail()\n  @MinLength(5)\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Email to authenticate user in our application',\n    example: 'user@domain.com',\n  })\n  email: string;\n\n  /**\n   * Password to access the platform\n   */\n  @IsString()\n  @MinLength(5)\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Password to authenticate the user in our application',\n    minimum: 8,\n    maximum: 128,\n    example: '123Mudar!',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RefreshToken.html":{"url":"interfaces/RefreshToken.html","title":"interface - RefreshToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/token/refresh-token.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                RefreshToken interface for use in typescript\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            account\n                                        \n                                \n                                \n                                        \n                                            expires\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            is_revoked\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        account\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        account:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Should be the account id to reference the token to account\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expires\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expires:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Expires date of the token, to invalidate the credential\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        is_revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        is_revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This field should inform if the token is revoked to not accept access using this credential\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface RefreshToken {\n  id?: string;\n  /**\n   * Expires date of the token, to invalidate the credential\n   */\n  expires: Date;\n  /**\n   * This field should inform if the token is revoked to not accept access using this credential\n   */\n  is_revoked: boolean;\n  /**\n   * Should be the account id to reference the token to account\n   */\n  account: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/dto/account/refresh-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Refresh token validation object for request new token\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                refresh_token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code that you recieve when you athenticate, this could should use in order to get new valid token without need password', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQi...'})@IsNotEmpty({message: 'The refresh token is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/account/refresh-token.dto.ts:17\n                        \n                    \n\n            \n                \n                    To access the api and verify the session\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\n/**\n * Refresh token validation object for request new token\n */\nexport class RefreshTokenDto {\n  /**\n   * To access the api and verify the session\n   */\n  @ApiProperty({\n    description:\n      'Code that you recieve when you athenticate, this could should use in order to get new valid token without need password',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQi...',\n  })\n  @IsNotEmpty({ message: 'The refresh token is required' })\n  readonly refresh_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RefreshTokenPayload.html":{"url":"interfaces/RefreshTokenPayload.html","title":"interface - RefreshTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RefreshTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/token/refresh-token-payload.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Refresh token interface for use in typescript\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            jti\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        jti\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jti:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Embed the ID of the token\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Subject to return the account based on the subject\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface RefreshTokenPayload {\n  /**\n   * Embed the ID of the token\n   */\n  jti: number;\n  /**\n   * Subject to return the account based on the subject\n   */\n  sub: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokensRepository.html":{"url":"injectables/RefreshTokensRepository.html","title":"injectable - RefreshTokensRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokensRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/repositories/token/refresh-tokens.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createRefreshToken\n                            \n                            \n                                    Async\n                                findTokenById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(refreshTokenModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/repositories/token/refresh-tokens.repository.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        refreshTokenModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createRefreshToken(accountId: string, ttl: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/repositories/token/refresh-tokens.repository.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ttl\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTokenById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTokenById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/repositories/token/refresh-tokens.repository.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { isValidObjectId, Model } from 'mongoose';\nimport { RefreshToken } from '../../interfaces/token';\n\n@Injectable()\nexport class RefreshTokensRepository {\n  constructor(\n    @InjectModel('RefreshToken')\n    private readonly refreshTokenModel: Model,\n  ) {}\n\n  async findTokenById(id: number): Promise {\n    if (!isValidObjectId(id)) throw new BadRequestException('Invalid token id');\n    return await this.refreshTokenModel.findOne({ id });\n  }\n\n  async createRefreshToken(\n    accountId: string,\n    ttl: number,\n  ): Promise {\n    if (!isValidObjectId(accountId))\n      throw new BadRequestException('Invalid account id');\n\n    const token = new this.refreshTokenModel();\n\n    token.account = accountId;\n    token.is_revoked = false;\n\n    const expiration = new Date();\n    expiration.setTime(expiration.getTime() + ttl);\n\n    token.expires = expiration;\n\n    return await token.save();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseEncryptionDto.html":{"url":"classes/ResponseEncryptionDto.html","title":"class - ResponseEncryptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseEncryptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/dto/encryption/response-encryption.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/dto/encryption/response-encryption.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ResponseEncryptionDto\n{\n  @ApiProperty()\n  data: object;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseInterface.html":{"url":"interfaces/ResponseInterface.html","title":"interface - ResponseInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interfaces/response.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Core response interface for all endpoints in our application\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            errorCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            errorName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Data with the response payload\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         ResponseInterfaceStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ResponseInterfaceStatus\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Status message if was processed corretly\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ResponseInterface> {\n  /**\n   * Status message if was processed corretly\n   */\n  status: ResponseInterfaceStatus;\n\n  message?: string;\n  /**\n   * Data with the response payload\n   */\n  data?: DataType;\n\n  errorName?: string;\n  errorCode?: number;\n}\n\nexport type ResponseInterfaceStatus = 'success' | 'error';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SecurityMiddleware.html":{"url":"injectables/SecurityMiddleware.html","title":"injectable - SecurityMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SecurityMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/middleware/security.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/middleware/security.middleware.ts:17\n                \n            \n\n\n            \n                \n                    Encrypts the request body and response data before passing it on to the next middleware.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe request object.\n\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe response object.\n\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe next middleware function.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport * as crypto from 'crypto-js';\n\n@Injectable()\n/**\n * Middleware for encrypting the request body and response data.\n */\nexport class SecurityMiddleware implements NestMiddleware {\n  /**\n   * Encrypts the request body and response data before passing it on to the next middleware.\n   *\n   * @param req - The request object.\n   * @param res - The response object.\n   * @param next - The next middleware function.\n   */\n  use(req: Request, res: Response, next: NextFunction) {\n    // Encrypt the request body\n    if (req.body) {\n      req.body = crypto.AES.encrypt(\n        JSON.stringify(req.body),\n        'secret key',\n      ).toString();\n    }\n\n    // Add a listener to the response to encrypt the response data\n    const oldEnd = res.end;\n    const chunks: any[] = [];\n\n    res.write = (chunk: any): any => {\n      chunks.push(chunk);\n    };\n\n    res.end = (chunk?: any): any => {\n      if (chunk) {\n        chunks.push(chunk);\n      }\n\n      const body = Buffer.concat(chunks).toString('utf8');\n      const encryptedBody = crypto.AES.encrypt(body, 'secret key').toString();\n\n      oldEnd.call(res, encryptedBody);\n    };\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StitchModule.html":{"url":"modules/StitchModule.html","title":"module - StitchModule","body":"\n                   \n\n\n\n\n    Modules\n    StitchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StitchModule\n\n\n\ncluster_StitchModule_imports\n\n\n\n\nAccountModule\n\nAccountModule\n\n\n\nStitchModule\n\nStitchModule\n\nStitchModule -->\n\nAccountModule->StitchModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nStitchModule -->\n\nDatabaseModule->StitchModule\n\n\n\n\n\nEncryptionModule\n\nEncryptionModule\n\nStitchModule -->\n\nEncryptionModule->StitchModule\n\n\n\n\n\nHeimdallModule\n\nHeimdallModule\n\nStitchModule -->\n\nHeimdallModule->StitchModule\n\n\n\n\n\nUptimeModule\n\nUptimeModule\n\nStitchModule -->\n\nUptimeModule->StitchModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/stitch.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AccountModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EncryptionModule\n                        \n                        \n                            HeimdallModule\n                        \n                        \n                            UptimeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountModule } from './modules/account/account.module';\nimport { DatabaseModule } from './core/database/database.module';\nimport { UptimeModule } from './core/uptime/uptime.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { EncryptionModule } from './modules/encryption/encryption.module';\nimport { HeimdallModule } from './core/heimdall/heimdall.module';\n\n@Module({\n  imports: [\n    ScheduleModule.forRoot(),\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, './', 'documentation'),\n    }),\n    UptimeModule,\n    DatabaseModule,\n    AccountModule,\n    EncryptionModule,\n    HeimdallModule\n  ],\n  controllers: [],\n})\nexport class StitchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TestModule.html":{"url":"modules/TestModule.html","title":"module - TestModule","body":"\n                   \n\n\n\n\n    Modules\n    TestModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/test/test.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [MongooseModule.forRoot(`mongodb://localhost:27017/test`)],\n})\nexport class TestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interceptor/timeout-interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/interceptor/timeout-interceptor.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/interceptor/timeout-interceptor.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n  constructor(private readonly reflector: Reflector) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const response = context.switchToHttp().getResponse();\n    const timeout =\n      this.reflector.get('request-timeout', context.getHandler()) ||\n      60000;\n    response.setTimeout(timeout);\n\n    return next.handle();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TokenModule.html":{"url":"modules/TokenModule.html","title":"module - TokenModule","body":"\n                   \n\n\n\n\n    Modules\n    TokenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TokenModule\n\n\n\ncluster_TokenModule_providers\n\n\n\ncluster_TokenModule_exports\n\n\n\n\nTokensService \n\nTokensService \n\n\n\nTokenModule\n\nTokenModule\n\nTokensService  -->\n\nTokenModule->TokensService \n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nTokenModule -->\n\nJwtStrategy->TokenModule\n\n\n\n\n\nRefreshTokensRepository\n\nRefreshTokensRepository\n\nTokenModule -->\n\nRefreshTokensRepository->TokenModule\n\n\n\n\n\nTokensService\n\nTokensService\n\nTokenModule -->\n\nTokensService->TokenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/token/token.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            A module for managing authentication tokens and refresh tokens.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtStrategy\n                        \n                        \n                            RefreshTokensRepository\n                        \n                        \n                            TokensService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TokensService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RefreshTokenSchema } from '../../shared/schemas/token';\nimport { RefreshTokensRepository } from '../../shared/repositories/token/';\nimport { JwtStrategy } from '../../shared/strategies/jwt.strategy';\nimport { config } from '../../../config/config';\nimport { AccountModule } from '../account/account.module';\nimport { TokensService } from './token.service';\n\n/**\n * A module for managing authentication tokens and refresh tokens.\n *\n * @module TokenModule\n */\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: 'RefreshToken', schema: RefreshTokenSchema },\n    ]),\n    JwtModule.register({\n      secret: config.jwtSecret,\n      signOptions: {\n        expiresIn: config.jwtExpirationTime,\n      },\n    }),\n    forwardRef(() => AccountModule),\n  ],\n  providers: [TokensService, RefreshTokensRepository, JwtStrategy],\n  exports: [TokensService],\n})\nexport class TokenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokensService.html":{"url":"injectables/TokensService.html","title":"injectable - TokensService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokensService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/modules/token/token.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                jwt\n                            \n                            \n                                    Private\n                                    Readonly\n                                tokens\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAccessTokenFromRefreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                decodeRefreshToken\n                            \n                            \n                                    Async\n                                generateAccessToken\n                            \n                            \n                                    Async\n                                generateRefreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                getStoredTokenFromRefreshTokenPayload\n                            \n                            \n                                    Private\n                                    Async\n                                getUserFromRefreshTokenPayload\n                            \n                            \n                                    Public\n                                    Async\n                                resolveRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(tokens: RefreshTokensRepository, account: AccountRepository, jwt: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/token/token.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tokens\n                                                  \n                                                        \n                                                                        RefreshTokensRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        account\n                                                  \n                                                        \n                                                                        AccountRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createAccessTokenFromRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccessTokenFromRefreshToken(refresh: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/token/token.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refresh\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        decodeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeRefreshToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/token/token.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAccessToken(account: Account)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/token/token.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    account\n                                    \n                                                Account\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateRefreshToken(account: Account, expiresIn: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/token/token.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    account\n                                    \n                                                Account\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expiresIn\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getStoredTokenFromRefreshTokenPayload\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStoredTokenFromRefreshTokenPayload(payload: RefreshTokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/token/token.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RefreshTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getUserFromRefreshTokenPayload\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFromRefreshTokenPayload(payload: RefreshTokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/token/token.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RefreshTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resolveRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    resolveRefreshToken(encoded: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/token/token.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    encoded\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JwtService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/token/token.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tokens\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RefreshTokensRepository\n\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/token/token.service.ts:22\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { SignOptions, TokenExpiredError } from 'jsonwebtoken';\nimport { RefreshToken } from '../../shared/interfaces/token';\nimport { AccountRepository } from '../../shared/repositories/account/';\nimport { RefreshTokensRepository } from '../../shared/repositories/token/';\nimport { Account } from '../../shared/interfaces/account';\nimport { RefreshTokenPayload } from '../../shared/interfaces/token';\n\nconst BASE_OPTIONS: SignOptions = {\n  issuer: 'https://uplink.xyz',\n  audience: 'https://uplink.xyz',\n};\n\n@Injectable()\nexport class TokensService {\n  private readonly tokens: RefreshTokensRepository;\n  private readonly jwt: JwtService;\n\n  public constructor(\n    tokens: RefreshTokensRepository,\n    @Inject(forwardRef(() => AccountRepository))\n    private account: AccountRepository,\n    jwt: JwtService,\n  ) {\n    this.tokens = tokens;\n    this.account = account;\n    this.jwt = jwt;\n  }\n\n  async generateAccessToken(account: Account): Promise {\n    const opts: SignOptions = {\n      ...BASE_OPTIONS,\n      subject: String(account.id),\n    };\n\n    return this.jwt.signAsync({}, opts);\n  }\n\n  async generateRefreshToken(\n    account: Account,\n    expiresIn: number,\n  ): Promise {\n    const token = await this.tokens.createRefreshToken(account.id, expiresIn);\n\n    const opts: SignOptions = {\n      ...BASE_OPTIONS,\n      expiresIn,\n      subject: String(account.id),\n      jwtid: String(token.id),\n    };\n\n    return this.jwt.signAsync({}, opts);\n  }\n\n  public async resolveRefreshToken(\n    encoded: string,\n  ): Promise {\n    const payload = await this.decodeRefreshToken(encoded);\n    const token = await this.getStoredTokenFromRefreshTokenPayload(payload);\n\n    if (!token) {\n      throw new UnauthorizedException('Refresh token not found');\n    }\n\n    if (token.is_revoked) {\n      throw new UnauthorizedException('Refresh token revoked');\n    }\n\n    const account = await this.getUserFromRefreshTokenPayload(payload);\n\n    if (!account) {\n      throw new UnauthorizedException('Refresh token malformed');\n    }\n\n    return { account, token };\n  }\n\n  public async createAccessTokenFromRefreshToken(\n    refresh: string,\n  ): Promise {\n    const { account } = await this.resolveRefreshToken(refresh);\n\n    const token = await this.generateAccessToken(account);\n\n    return { account, token };\n  }\n\n  private async decodeRefreshToken(\n    token: string,\n  ): Promise {\n    try {\n      return this.jwt.verifyAsync(token);\n    } catch (e) {\n      if (e instanceof TokenExpiredError) {\n        throw new UnauthorizedException('Refresh token expired');\n      } else {\n        throw new UnauthorizedException('Refresh token malformed');\n      }\n    }\n  }\n\n  private async getUserFromRefreshTokenPayload(\n    payload: RefreshTokenPayload,\n  ): Promise {\n    const subId = `${payload.sub}`;\n\n    if (!subId) {\n      throw new UnauthorizedException('Refresh token malformed');\n    }\n\n    return this.account.findForId(subId);\n  }\n\n  private async getStoredTokenFromRefreshTokenPayload(\n    payload: RefreshTokenPayload,\n  ): Promise {\n    const tokenId = payload.jti;\n\n    if (!tokenId) {\n      throw new UnauthorizedException('Refresh token malformed');\n    }\n\n    return this.tokens.findTokenById(tokenId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UptimeController.html":{"url":"controllers/UptimeController.html","title":"controller - UptimeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UptimeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/uptime/uptime.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                root\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        root\n                        \n                    \n                \n            \n            \n                \nroot()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app/core/uptime/uptime.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { uptime: number; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiExcludeController, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('uplink')\n@ApiExcludeController(true)\n@Controller('/')\nexport class UptimeController {\n  @Get()\n  root() {\n    return { uptime: process.uptime() * 1000 };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UptimeModule.html":{"url":"modules/UptimeModule.html","title":"module - UptimeModule","body":"\n                   \n\n\n\n\n    Modules\n    UptimeModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/core/uptime/uptime.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UptimeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UptimeController } from './uptime.controller';\n\n@Module({\n  controllers: [UptimeController],\n})\nexport class UptimeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ValidationModule.html":{"url":"modules/ValidationModule.html","title":"module - ValidationModule","body":"\n                   \n\n\n\n\n    Modules\n    ValidationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ValidationModule\n\n\n\ncluster_ValidationModule_providers\n\n\n\n\nValidationPipe\n\nValidationPipe\n\n\n\nValidationModule\n\nValidationModule\n\nValidationModule -->\n\nValidationPipe->ValidationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/core/pipes/validation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ValidationPipe\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ValidationPipe } from './validation.pipe';\n\n@Module({\n  providers: [ValidationPipe],\n  exports: [ValidationPipe],\n})\nexport class ValidationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/pipes/validation.pipe.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/pipes/validation.pipe.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  BadRequestException,\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToClass } from 'class-transformer';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: any): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find((type) => metatype === type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n1.2.0 (2023-10-01)\nFeatures\n\nfinish implementation (e9d66be)\nfixed the package (6c6642f)\nimplementation final configurations for running docker (9b2c4f5)\nStarting the repository and code (c20a03b)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/core/database/database.provider.ts\n            \n            variable\n            databaseProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/decorators/api-endpoint.ts\n            \n            function\n            ApiEndpoint\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/decorators/set-timeout.ts\n            \n            function\n            SetRequestTimeout\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/decorators/set-timeout.ts\n            \n            variable\n            SetTimeout\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/exceptions/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/core/heimdall/heimdall.service.ts\n            \n            injectable\n            HeimdallService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/core/interceptor/timeout-interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/repository.interface.ts\n            \n            interface\n            IRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/response.interface.ts\n            \n            interface\n            ResponseInterface\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/app/core/interfaces/service.interface.ts\n            \n            interface\n            IService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/core/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/core/uptime/uptime.controller.ts\n            \n            controller\n            UptimeController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/core/utils/formatter.ts\n            \n            variable\n            normalizeFilter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/utils/formatter.ts\n            \n            variable\n            normalizeIMEI\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/utils/formatter.ts\n            \n            variable\n            normalizeSort\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/utils/generators.ts\n            \n            function\n            random\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/utils/generators.ts\n            \n            function\n            randomNumber\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/utils/generators.ts\n            \n            function\n            randomString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/utils/generators.ts\n            \n            variable\n            numberCharacter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/utils/generators.ts\n            \n            variable\n            stringCharacter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/utils/model.ts\n            \n            variable\n            keyGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/utils/model.ts\n            \n            variable\n            modelGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/utils/model.ts\n            \n            variable\n            modelRegexQuery\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/utils/parsers.ts\n            \n            variable\n            parseNumber\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/modules/account/account.controller.ts\n            \n            controller\n            AccountController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/modules/account/account.service.ts\n            \n            injectable\n            AccountService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/modules/encryption/encryption.controller.ts\n            \n            controller\n            EncryptionController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/modules/encryption/encryption.service.ts\n            \n            injectable\n            EncryptionService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/modules/token/token.service.ts\n            \n            injectable\n            TokensService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/modules/token/token.service.ts\n            \n            variable\n            BASE_OPTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/converter/bytes.ts\n            \n            function\n            byte2giga\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/converter/bytes.ts\n            \n            function\n            giga2byte\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/converter/time.ts\n            \n            function\n            miliseconds2seconds\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/converter/time.ts\n            \n            function\n            seconds2miliseconds\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/account-response.dto.ts\n            \n            class\n            AccountResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/account-token-response.dto.ts\n            \n            class\n            AccountTokenResponseDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/authentication-response.dto.ts\n            \n            class\n            AuthenticationResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/create-account.dto.ts\n            \n            class\n            CreateAccountDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/create-account.dto.ts\n            \n            variable\n            checkEmptySpaceString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/create-account.dto.ts\n            \n            variable\n            checkEmptySpaceStringErrMsg\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/create-account.dto.ts\n            \n            variable\n            checkLowerCaseString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/create-account.dto.ts\n            \n            variable\n            checkLowerCaseStringErrMsg\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/create-account.dto.ts\n            \n            variable\n            checkNumberString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/create-account.dto.ts\n            \n            variable\n            checkNumberStringErrMsg\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/create-account.dto.ts\n            \n            variable\n            checkSpecialString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/create-account.dto.ts\n            \n            variable\n            checkSpecialStringErrMsg\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/create-account.dto.ts\n            \n            variable\n            checkUpperCaseString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/create-account.dto.ts\n            \n            variable\n            checkUpperCaseStringErrMsg\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/create-account.dto.ts\n            \n            variable\n            MAX_PASSWORD_LENGTH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/create-account.dto.ts\n            \n            variable\n            MIN_PASSWORD_LENGTH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/shared/dto/account/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/shared/dto/encryption/create-decryption.dto.ts\n            \n            class\n            CreateDecryptionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/dto/encryption/create-encryption.dto.ts\n            \n            class\n            CreateEncryptionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/dto/encryption/response-encryption.dto.ts\n            \n            class\n            ResponseEncryptionDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/shared/guards/jwt.guard.ts\n            \n            injectable\n            JWTGuard\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/account/account-token.interface.ts\n            \n            interface\n            AccountToken\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/account/account.interface.ts\n            \n            interface\n            Account\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/encryption/decrypted-response.interface.ts\n            \n            interface\n            DecryptedResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/encryption/encrypted-response.interface.ts\n            \n            interface\n            EncryptedResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/encryption/handshake-response.interface.ts\n            \n            interface\n            HandshakeResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/token/access-token-payload.interface.ts\n            \n            interface\n            AccessTokenPayload\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/token/refresh-token-payload.interface.ts\n            \n            interface\n            RefreshTokenPayload\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/token/refresh-token.interface.ts\n            \n            interface\n            RefreshToken\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/app/shared/middleware/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/middleware/security.middleware.ts\n            \n            injectable\n            SecurityMiddleware\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/shared/repositories/account/account.repository.ts\n            \n            injectable\n            AccountRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/shared/repositories/token/refresh-tokens.repository.ts\n            \n            injectable\n            RefreshTokensRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/shared/schemas/account/account.schema.ts\n            \n            variable\n            AccountSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/schemas/token/refresh-token.schema.ts\n            \n            variable\n            RefreshTokenSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/config/config.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^1.0.1\n        \n            @nestjs/common : ^9.2.1\n        \n            @nestjs/core : ^9.2.1\n        \n            @nestjs/jwt : ^10.0.1\n        \n            @nestjs/mongoose : ^9.2.1\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/schedule : ^3.0.1\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.1.4\n        \n            @nestjs/terminus : ^9.1.4\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @types/multer : ^1.4.7\n        \n            aws-sdk : ^2.1302.0\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            crypto-js : ^4.1.1\n        \n            decimal.js : ^10.4.3\n        \n            dotenv : ^16.0.3\n        \n            firebase-admin : ^11.5.0\n        \n            handlebars : ^4.7.7\n        \n            jsonwebtoken : ^9.0.0\n        \n            moment : ^2.29.4\n        \n            mongoose : ^6.8.3\n        \n            nest-csv-parser : ^2.0.4\n        \n            nodemailer : ^6.9.1\n        \n            openpgp : ^5.10.2\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            swagger-themes : ^1.2.28\n        \n            typeorm : ^0.3.11\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiEndpoint   (src/.../api-endpoint.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            byte2giga   (src/.../bytes.ts)\n                        \n                        \n                            giga2byte   (src/.../bytes.ts)\n                        \n                        \n                            miliseconds2seconds   (src/.../time.ts)\n                        \n                        \n                            random   (src/.../generators.ts)\n                        \n                        \n                            randomNumber   (src/.../generators.ts)\n                        \n                        \n                            randomString   (src/.../generators.ts)\n                        \n                        \n                            seconds2miliseconds   (src/.../time.ts)\n                        \n                        \n                            SetRequestTimeout   (src/.../set-timeout.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/core/decorators/api-endpoint.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiEndpoint\n                        \n                    \n                \n            \n            \n                \nApiEndpoint(options: ApiEndpointOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ApiEndpointOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/app/shared/converter/bytes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        byte2giga\n                        \n                    \n                \n            \n            \n                \nbyte2giga(bytes: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bytes\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Decimal\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        giga2byte\n                        \n                    \n                \n            \n            \n                \ngiga2byte(gigas: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    gigas\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Decimal\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/app/shared/converter/time.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        miliseconds2seconds\n                        \n                    \n                \n            \n            \n                \nmiliseconds2seconds(milliseconds: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    milliseconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Decimal\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seconds2miliseconds\n                        \n                    \n                \n            \n            \n                \nseconds2miliseconds(seconds: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Decimal\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/app/core/utils/generators.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        random\n                        \n                    \n                \n            \n            \n                \nrandom(length: number, characters: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    characters\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        randomNumber\n                        \n                    \n                \n            \n            \n                \nrandomNumber(length: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        randomString\n                        \n                    \n                \n            \n            \n                \nrandomString(length: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/app/core/decorators/set-timeout.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SetRequestTimeout\n                        \n                    \n                \n            \n            \n                \nSetRequestTimeout(timeout: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    timeout\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        600000\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nA api for efficient and scalable server-side stitch encription for applications.\n\n  \n  \n  \n\n\nInstallation\nTo install the Stitch API, clone the repository and navigate to the project's root directory. Then, run the following command:\n$ npm installThis will install all the required dependencies for the application.\nRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EncryptionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HeimdallModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StitchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TestModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TokenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UptimeModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ValidationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountModule\n\n\n\ncluster_AccountModule_imports\n\n\n\ncluster_AccountModule_exports\n\n\n\ncluster_AccountModule_providers\n\n\n\ncluster_EncryptionModule\n\n\n\ncluster_EncryptionModule_imports\n\n\n\ncluster_EncryptionModule_providers\n\n\n\ncluster_HeimdallModule\n\n\n\ncluster_HeimdallModule_exports\n\n\n\ncluster_HeimdallModule_providers\n\n\n\ncluster_StitchModule\n\n\n\ncluster_StitchModule_imports\n\n\n\ncluster_TokenModule\n\n\n\ncluster_TokenModule_exports\n\n\n\ncluster_TokenModule_providers\n\n\n\ncluster_ValidationModule\n\n\n\ncluster_ValidationModule_providers\n\n\n\n\nTokenModule\n\nTokenModule\n\n\n\nAccountModule\n\nAccountModule\n\nAccountModule -->\n\nTokenModule->AccountModule\n\n\n\n\n\nTokensService \n\nTokensService \n\nTokensService  -->\n\nTokenModule->TokensService \n\n\n\n\n\nAccountRepository \n\nAccountRepository \n\nAccountRepository  -->\n\nAccountModule->AccountRepository \n\n\n\n\n\nAccountService \n\nAccountService \n\nAccountService  -->\n\nAccountModule->AccountService \n\n\n\n\n\nStitchModule\n\nStitchModule\n\nStitchModule -->\n\nAccountModule->StitchModule\n\n\n\n\n\nAccountRepository\n\nAccountRepository\n\nAccountModule -->\n\nAccountRepository->AccountModule\n\n\n\n\n\nAccountService\n\nAccountService\n\nAccountModule -->\n\nAccountService->AccountModule\n\n\n\n\n\nHeimdallModule\n\nHeimdallModule\n\n\n\nEncryptionModule\n\nEncryptionModule\n\nEncryptionModule -->\n\nHeimdallModule->EncryptionModule\n\n\n\n\n\nHeimdallService \n\nHeimdallService \n\nHeimdallService  -->\n\nHeimdallModule->HeimdallService \n\n\n\nStitchModule -->\n\nHeimdallModule->StitchModule\n\n\n\nStitchModule -->\n\nEncryptionModule->StitchModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nEncryptionModule -->\n\nEncryptionService->EncryptionModule\n\n\n\n\n\nHeimdallService\n\nHeimdallService\n\nHeimdallModule -->\n\nHeimdallService->HeimdallModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nStitchModule -->\n\nDatabaseModule->StitchModule\n\n\n\n\n\nUptimeModule\n\nUptimeModule\n\nStitchModule -->\n\nUptimeModule->StitchModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nTokenModule -->\n\nJwtStrategy->TokenModule\n\n\n\n\n\nRefreshTokensRepository\n\nRefreshTokensRepository\n\nTokenModule -->\n\nRefreshTokensRepository->TokenModule\n\n\n\n\n\nTokensService\n\nTokensService\n\nTokenModule -->\n\nTokensService->TokenModule\n\n\n\n\n\nValidationPipe\n\nValidationPipe\n\n\n\nValidationModule\n\nValidationModule\n\nValidationModule -->\n\nValidationPipe->ValidationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.2.0\n        \n            Description : This project intends to create a backbone API.\n        \n            License : proprietary\n        \n            Author : Stitch Crew\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiEndpointOptions   (src/.../api-endpoint.ts)\n                        \n                        \n                            CustomSchemaProperties   (src/.../refresh-token.schema.ts)\n                        \n                        \n                            ResponseInterfaceStatus   (src/.../response.interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/core/decorators/api-endpoint.ts\n    \n    \n        \n            \n                \n                    \n                    ApiEndpointOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/app/shared/schemas/token/refresh-token.schema.ts\n    \n    \n        \n            \n                \n                    \n                    CustomSchemaProperties\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/app/core/interfaces/response.interface.ts\n    \n    \n        \n            \n                \n                    \n                    ResponseInterfaceStatus\n                \n            \n            \n                \n                        \"success\" | \"error\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccountSchema   (src/.../account.schema.ts)\n                        \n                        \n                            BASE_OPTIONS   (src/.../token.service.ts)\n                        \n                        \n                            checkEmptySpaceString   (src/.../create-account.dto.ts)\n                        \n                        \n                            checkEmptySpaceStringErrMsg   (src/.../create-account.dto.ts)\n                        \n                        \n                            checkLowerCaseString   (src/.../create-account.dto.ts)\n                        \n                        \n                            checkLowerCaseStringErrMsg   (src/.../create-account.dto.ts)\n                        \n                        \n                            checkNumberString   (src/.../create-account.dto.ts)\n                        \n                        \n                            checkNumberStringErrMsg   (src/.../create-account.dto.ts)\n                        \n                        \n                            checkSpecialString   (src/.../create-account.dto.ts)\n                        \n                        \n                            checkSpecialStringErrMsg   (src/.../create-account.dto.ts)\n                        \n                        \n                            checkUpperCaseString   (src/.../create-account.dto.ts)\n                        \n                        \n                            checkUpperCaseStringErrMsg   (src/.../create-account.dto.ts)\n                        \n                        \n                            config   (src/.../config.ts)\n                        \n                        \n                            databaseProviders   (src/.../database.provider.ts)\n                        \n                        \n                            keyGuard   (src/.../model.ts)\n                        \n                        \n                            MAX_PASSWORD_LENGTH   (src/.../create-account.dto.ts)\n                        \n                        \n                            MIN_PASSWORD_LENGTH   (src/.../create-account.dto.ts)\n                        \n                        \n                            modelGuard   (src/.../model.ts)\n                        \n                        \n                            modelRegexQuery   (src/.../model.ts)\n                        \n                        \n                            normalizeFilter   (src/.../formatter.ts)\n                        \n                        \n                            normalizeIMEI   (src/.../formatter.ts)\n                        \n                        \n                            normalizeSort   (src/.../formatter.ts)\n                        \n                        \n                            numberCharacter   (src/.../generators.ts)\n                        \n                        \n                            parseNumber   (src/.../parsers.ts)\n                        \n                        \n                            RefreshTokenSchema   (src/.../refresh-token.schema.ts)\n                        \n                        \n                            SetTimeout   (src/.../set-timeout.ts)\n                        \n                        \n                            stringCharacter   (src/.../generators.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/shared/schemas/account/account.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AccountSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new mongoose.Schema({\n  password: { type: String, required: true },\n  email: {\n    type: String,\n    required: true,\n    index: { unique: true },\n  }\n})\n                    \n                \n\n\n        \n    \n\n    src/app/modules/token/token.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BASE_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SignOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  issuer: 'https://uplink.xyz',\n  audience: 'https://uplink.xyz',\n}\n                    \n                \n\n\n        \n    \n\n    src/app/shared/dto/account/create-account.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        checkEmptySpaceString\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^((?![\\s]).)*$/\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkEmptySpaceStringErrMsg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Your password cannot have empty spaces'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkLowerCaseString\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(?=.*?[a-z])/\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkLowerCaseStringErrMsg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Your password must include lowercase character'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkNumberString\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(?=.*?[0-9])/\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkNumberStringErrMsg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Your password must include numbers'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkSpecialString\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(?=.*?[!“#$%&‘()*+,-./:;?@[\\]^_`{|}~])/\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkSpecialStringErrMsg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Your password must include special character'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkUpperCaseString\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(?=.*?[A-Z])/\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkUpperCaseStringErrMsg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Your password must include uppercase character'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MAX_PASSWORD_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Default value : config.maxPasswordLength\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MIN_PASSWORD_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Default value : config.minPasswordLength\n                    \n                \n\n\n        \n    \n\n    src/config/config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  jwtExpirationTime: process.env.JWT_EXPIRATION_TIME,\n  jwtSecret: process.env.JWT_SECRET,\n  mongoUrl: process.env.MONGO_URL,\n  certificationAuthorityService: process.env.CERTIFICATION_AUTHORITY_SERVICE,\n  minPasswordLength: 8,\n  maxPasswordLength: 128,\n  saltEncrypt: process.env.SALT_SERVICE\n}\n                    \n                \n\n\n        \n    \n\n    src/app/core/database/database.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: config.mongoUrl,\n    useFactory: async (): Promise =>\n      await mongoose.createConnection(config.mongoUrl),\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/app/core/utils/model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        keyGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  model: Partial,\n) => model\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        modelGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  model: Partial,\n) => model\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        modelRegexQuery\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  search: string,\n  index: IndexDefinition,\n): Record => {\n  const queries = [];\n  const pattern = `.*${search}.*`;\n  for (const key in index)\n    queries.push({ [key]: { $regex: pattern, $options: 'i' } });\n  return { $or: queries };\n}\n                    \n                \n\n\n        \n    \n\n    src/app/core/utils/formatter.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        normalizeFilter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (filter?: Record) => {\n  filter = filter ?? {};\n  const normalized = {};\n  for (const key in filter) {\n    let value = filter[key];\n    if (!isNaN(value)) value = parseFloat(value);\n    else if (['true', 'false'].includes(value)) value = value === 'true';\n    else if (!isNaN(Date.parse(value))) value = new Date(value);\n    normalized[key] = value;\n  }\n  return normalized;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        normalizeIMEI\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (imei) => imei.replace(/-/g, '').slice(0, 16)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        normalizeSort\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (sort?: Record) => {\n  const normalized = {};\n  for (const key in sort) {\n    normalized[key] = parseInt(sort[key]);\n  }\n  return normalized;\n}\n                    \n                \n\n\n        \n    \n\n    src/app/core/utils/generators.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        numberCharacter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '123456789'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stringCharacter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n                    \n                \n\n\n        \n    \n\n    src/app/core/utils/parsers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parseNumber\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (x: string | number) =>\n  parseFloat((x + '').replace(',', '.'))\n                    \n                \n\n\n        \n    \n\n    src/app/shared/schemas/token/refresh-token.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RefreshTokenSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new mongoose.Schema & CustomSchemaProperties\n>({\n  expires: { type: Date, required: true },\n  is_revoked: { type: Boolean, required: true },\n  account: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Account',\n    required: true,\n  },\n})\n                    \n                \n\n\n        \n    \n\n    src/app/core/decorators/set-timeout.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SetTimeout\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (timeout: number) => SetMetadata('request-timeout', timeout)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
